<?php
/**
 * @file
 * eComma text annotation module main file.
 * Provides annotation for CCK textarea widget.
 */

/**
 * Implements hook_preprocess_page().
 */
function ecomma_preprocess_page(&$vars) {
  if (isset($vars['node'])) {
    global $base_url;
    $content_type_name = $vars['node']->type;
    $content_type_data = content_types($content_type_name);
    $ecomma_enabled = 0;

    $user_role = "user";
    if ($vars['node']->uid == 0) {
      $user_role = "anonymous";
    }

    module_load_include('inc', 'ecomma', 'ecomma');

    if (isset($content_type_data)) {
      foreach ($content_type_data['fields'] as $field_name => $field_data) {
        if ($field_data['widget']['type'] == 'text_textarea' && $ecomma_enabled == 0) {
          if (db_result(db_query("SELECT ecomma_enabled FROM {ecomma_field_enabled} WHERE field_name='%s' AND content_type_name='%s'", $field_name, $content_type_name))) {
            $ecomma_enabled = db_result(db_query("SELECT ecomma_enabled FROM {ecomma_field_enabled} WHERE field_name='%s' AND content_type_name='%s'", $field_name, $content_type_name));
          }
        }
      }
    }

    if (isset($vars['node'], $vars['node']->type) && $ecomma_enabled) {
      drupal_add_css(drupal_get_path('module', 'ecomma') . '/css/ecomma.css');
      if (libraries_get_path('jquery.ui')) {
        drupal_add_css(libraries_get_path('jquery.ui') . '/themes/base/jquery-ui.css');
      }
      $vars['styles'] = drupal_get_css();
      drupal_add_js(drupal_get_path('module', 'ecomma') . '/js/ecomma.js');
      jquery_ui_add(array(
        'ui.dialog',
        'ui.tabs',
        'ui.draggable',
        'ui.droppable',
        'ui.sortable',
      ));
      drupal_add_js(array(
        'ecomma' => array(
          'base_url_var' => $base_url,
          'user_role' => $user_role,
          'ecommaToken' => drupal_get_token(),
        )),
        'setting'
      );
    }
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function ecomma_ctools_plugin_directory($module, $plugin) {
  return "includes/plugin/$plugin";
}

/**
 * Implements hook_perm().
 */
function ecomma_perm() {
  return array('ecomma perm admin');
}

/**
 * Implements hook_help().
 */
function ecomma_help($path, $arg) {
  switch ($path) {
    case 'admin/help#ecomma':
      if (file_exists($file = drupal_get_path('module', 'ecomma') . '/README.txt')) {
        return '<pre>' . implode("\n", array_slice(explode("\n", @file_get_contents($file)), 2)) . '</pre>';
      }
      break;
  }
}

/**
 * Implements hook_menu().
 */
function ecomma_menu() {

  $items['tag_range/%/%/%/%'] = array(
    'title' => 'Annotation range',
    'description' => 'Insert term annotation data.',
    'page callback' => 'ecomma_tag_range_function',
    'page arguments' => array(1, 2, 3, 4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => '/includes/ecomma.ajax.inc',
  );

  $items['tag_range_delete/%/%'] = array(
    'title' => 'Annotation range',
    'description' => 'Insert term annotation data.',
    'page callback' => 'ecomma_tag_range_delete_function',
    'page arguments' => array(1, 2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => '/includes/ecomma.ajax.inc',
  );

  $items['tag_query/%/%'] = array(
    'title' => 'Tag query',
    'description' => 'Term table query to return data to interface.',
    'page callback' => 'ecomma_tag_query_function',
    'page arguments' => array(1, 2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => '/includes/ecomma.ajax.inc',
  );

  $items['comment_query/%/%'] = array(
    'title' => 'Comment query',
    'description' => 'Comment table query to return data to interface.',
    'page callback' => 'ecomma_comment_query_function',
    'page arguments' => array(1, 2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => '/includes/ecomma.ajax.inc',
  );

  $items['comments_active_text/%/%'] = array(
    'title' => 'Comment query',
    'description' => 'Comment table query to return data to interface.',
    'page callback' => 'ecomma_comments_active_text_function',
    'page arguments' => array(1, 2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => '/includes/ecomma.ajax.inc',
  );

  $items['enabled_callback/%'] = array(
    'title' => 'Textfield ecomma enabled status',
    'description' => 'Check if ecomma textfield was enabled.',
    'page callback' => 'ecomma_enabled_query_function',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => '/includes/ecomma.ajax.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function ecomma_theme($existing, $type, $theme, $path) {

  $hooks['views_view__ecomma_user_data__page_1'] = array(
    'template'  => 'templates/views-view--ecomma_user_data--page-1',
    'original hook' => 'views_view',
    'preprocess functions' => array(
      'template_preprocess',
      'template_preprocess_views_view',
    ),
    'arguments' => array('view' => NULL),
  );

  $hooks['ecomma_formatter_myformatter'] = array(
    'preprocess functions' => array(
      'template_preprocess',
      'template_preprocess_views_view',
    ),
    'arguments' => array('node' => NULL, 'field' => NULL),
  );

  return $hooks;
}


/**
 * Implements hook_theme_registry_alter().
 */
function ecomma_theme_registry_alter(&$theme_registry) {
  $modulepath = drupal_get_path('module', 'ecomma');
  array_unshift($theme_registry['node']['theme paths'], $modulepath . '/templates');
  $functions =& $theme_registry['comment']['preprocess functions'];
  $index = array_flip($functions);
  array_splice($functions, $index['template_preprocess_comment'], 0, array('ecomma__preprocess_comment'));/**/
}

/**
 * Implements hook_preprocess_comment().
 */
function ecomma__preprocess_comment(&$variables) {
  $variables['comment']->subject = NULL;
}

/**
 * Implements hook_preprocess_node().
 */
function ecomma_preprocess_node(&$vars) {
  $vars['template_files'][] = 'node-ecomma';
}


/**
 * Implements hook_ecomma_formatter_myformatter().
 */
function theme_ecomma_formatter_myformatter($node, $field) {
  $whole_text = "";

  // Merging cck field values to whole text.
  // Inserting [paragraph] for later substitution.
  foreach ($field as $field_item) {
    $whole_text .= $field_item['value'] . " paragraphparagraph ";
  }

  // Inserting spaces between every word/punctuation or word/space/punctuation.
  // To use in next step preg_split. Leaving out dash (2D) and underscores (5F).
  $whole_text = preg_replace("/([^\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)([\\x20]+)?([\\x21-\\x26\\x28-\\x2C\\x2E\\x2F\\x3A-\\x40\\x5B-\\x5E\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)([\\x20]+)?/u", "$1 $3 ", $whole_text);

  // Inserting spaces between every word/punctuation or word/space/punctuation.
  // To use in next step preg_split. Leaving out dash (2D) and underscores (5F).
  $whole_text = preg_replace("/([^\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)([\\x20]+)([\\x2D]+)([\\x20]+)/u", "$1 $3 ", $whole_text);

  // Inserting spaces between every word/punctuation or parenthesis/comma.
  $whole_text = preg_replace("/([^\\x29]+)([\\x20]+)?([\\x2C]+)/u", "$1 $3 ", $whole_text);

  // Inserting spaces between word/dash/space. As needed for example in German.
  // Verb prefixes.
  $whole_text = preg_replace("/([^\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)([\\x2D]+)([\\x20]+)/u", "$1 $2 ", $whole_text);

  // Inserting spaces between two punctuation.
  $whole_text = preg_replace("/([\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5E\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)([\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5E\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)/u", "$1 $2 ", $whole_text);

  // Inserting spaces between two punctuation with whitespace.
  $whole_text = preg_replace("/([\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5E\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)([\\x20]+)([\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5E\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)/u", "$1 $2 ", $whole_text);

  // Reducing multiple to single white spaces.
  $whole_text = preg_replace("/([\\x20]+)/u", " ", $whole_text);

  // Splitting string into array. Items will be wrapped in span elements next.
  $field_words[] = preg_split("/(\s)/", $whole_text);

  // Wrap each word/punctuation in span elements.
  $wid = 1;
  foreach ($field_words[0] as $word) {
    if ($word != "") {
      // Is a word that contains only letters and is not a paragraph.
      if (preg_match("/[^\\x20-\\x26\\x28-\\x2F\\x3A-\\x3F\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+/u", $word)
       && !preg_match("/([\\x20-\\x26\\x28-\\x2F\\x3A-\\x3F\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)/u", $word)
       && !preg_match("/paragraphparagraph/", $word)) {
        $new_word[] = "<span class='ec-p" . $wid . " token' id='ec-p" . $wid . "'>" . trim($word) . "</span><div id='ec-bgr" . $wid . "' style='display:none;'></div>";
        $wid++;
      }
      // Wrap differently if it is punctuation.
      if (ctype_punct($word)) {
        $new_word[] = "<span class='ec-p" . $wid . " token punctuation' id='ec-p" . $wid . "'>" . trim($word) . "</span><div id='ec-bgr" . $wid . "' style='display:none;'></div>";
        $wid++;
      }
      // Wrap differently if it contains punctuation and letters.
      if (preg_match("/([^\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)([\\x20-\\x26\\x28-\\x2F\\x3A-\\x3F]+)([^\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)/u", $word)) {
        $new_word[] = "<span class='ec-p" . $wid . " token' id='ec-p" . $wid . "'>" . trim($word) . "</span><div id='ec-bgr" . $wid . "' style='display:none;'></div>";
        $wid++;
      }
      // Wrap differently if it is a paragraph marker.
      if (preg_match("/paragraphparagraph/", $word)) {
        $new_word[] = "paragraphparagraph";
      }
    }

    // Have to add unix line break character for later substitution.
    if ($word == ""|| preg_match("/paragraphparagraph/", $word)) {
      $new_word[] = "\n";
    }
  }

  // Add all array elements back together.
  $output = implode("<span class=text_space> </span>", $new_word);
  $output = preg_replace("/(\s\s+)/", "\n", $output);

  // Setting lines marker for future use.
  $lines = preg_split('/\n/', $output);

  $count = 0;
  // Wrapping line in line spans.
  foreach ($lines as $line) {
    if (!preg_match("/paragraphparagraph/", $line)) {
      $line_array[$count] = "<div class='ecomma_line'>" . $line . "</div>";
    }
    if (preg_match("/paragraphparagraph/", $line)) {
      $line_array[$count] = "<div class='ecomma_line'>" . preg_replace("/paragraphparagraph/", '', $line) . "</div>";
      $count++;
      $line_array[$count] = "paragraphparagraph";
    }
    $count++;
  }

  variable_set("ecomma_lines", $line_array);

  // Substituting div element with line class for \n unix line break.
  $display_text = "<div class='ecomma_line'>" . preg_replace('/\n/', "</div><br /><div class='ecomma_line'>", $output);
  $display_text = preg_replace("/<div class\=\'ecomma_line\'>(?!.*<div class\=\'ecomma_line\'>)/", "", $display_text);

  // Splitting into paragraphs for final output.
  $fields_array[] = preg_split("/paragraphparagraph/", $display_text);

  $fields_final = '';

  // Final output.
  foreach ($fields_array as $fields_array_item) {
    foreach ($fields_array_item as $fields_array_item_item) {
      $fields_final .= $fields_array_item_item . "\n<br /><br />";
    }
  }

  return $fields_final;

}

/**
 * Implements hook_panels_pane_content_alter().
 */
function ecomma_panels_pane_content_alter($content, $pane, $args, $context) {
  $content_type_name = $context['argument_nid_1']->data->type;
  $content_type_data = content_types($content_type_name);

  foreach ($content_type_data['fields'] as $field_name => $field_data) {
    if ($field_data['widget']['type'] == 'text_textarea' && preg_match("/field_/", $content->delta)) {
      if (db_result(db_query("SELECT ecomma_enabled FROM {ecomma_field_enabled} WHERE field_name='%s' AND content_type_name='%s'", $field_name, $content_type_name))) {
        $node = node_load($context['argument_nid_1']->data->nid);
        $content->content = theme('ecomma_formatter_myformatter', $node, $node->$field_name);
      }
    }
  }

}

/**
 * Implements hook_element_info_alter().
 */
function ecomma_element_info_alter(&$type) {
  if (isset($type['text_format']['#process'])) {
    foreach ($type['text_format']['#process'] as &$callback) {
      if ($callback === 'filter_process_format') {
        $callback = 'ecomma_filter_process_format';
      }
    }
  }

}

/**
 * Implements hook_filter_process_format().
 */
function ecomma_filter_process_format($element) {
  $element = filter_process_format($element);
  // Change input format to "Filtered HTML" for comment fields.
  if ($element['#field_name'] == 'comment_body') {
    $element['format']['format']['#default_value'] = '0';
  }
  return $element;
}

/**
 * Implements hook_nodeapi().
 */
function ecomma_nodeapi(&$node, $op, $teaser, $page) {

  $content_type_name = $node->type;
  $content_type_data = content_types($content_type_name);
  $ecomma_enabled = 0;

  foreach ($content_type_data['fields'] as $field_name => $field_data) {
    if ($field_data['widget']['type'] == 'text_textarea' && $ecomma_enabled == 0) {
      if (db_result(db_query("SELECT ecomma_enabled FROM {ecomma_field_enabled} WHERE field_name='%s' AND content_type_name='%s'", $field_name, $content_type_name))) {
        $ecomma_enabled = db_result(db_query("SELECT ecomma_enabled FROM {ecomma_field_enabled} WHERE field_name='%s' AND content_type_name='%s'", $field_name, $content_type_name));
      }
    }
  }

  if ($ecomma_enabled) {

    switch ($op) {

      case 'load':
        theme('ecomma_formatter_myformatter', $node, $node->$field_name);
        break;

      case 'view':
        $node->content[$field_name] = array(
          '#value' => '',
          '#weight' => 10,
        );
        $node->content[$field_name]['#value'] = theme('ecomma_formatter_myformatter', $node, $node->$field_name);
        break;

      case 'delete':
        db_query("DELETE FROM {ecomma} WHERE nid ='%d'", $node->nid);
        db_query("DELETE FROM {ecomma_range} WHERE nid ='%d'", $node->nid);
        break;

      case 'presave':
        global $user;
        if (!db_result(db_query("SELECT created FROM {ecomma_range} WHERE nid ='%d' AND uid ='%d'", $node->nid, $user->uid))) {
          $message = "An eComma text cannot be edited once it was annotated or the annotations will not be display correctly.<br />Please delete all annotations before you edit the text.";
          drupal_set_message($message, 'warning', TRUE);
        }

        break;

    }

  }

}

/**
 * Implements hook_form_alter().
 */
function ecomma_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'comment_form':
      // Call submit function to update ecomma_range with node comment info.
      $form['subject'] = NULL;
      $form['preview'] = NULL;
      $form['_author'] = NULL;
      $form['submit']['#value'] = "Add";
      $form['comment_filter']['comment']['#rows'] = 3;
      $form['comment_filter']['format'] = NULL;
      $form['#submit'][] = 'ecomma_comment_submit';
      break;

    case 'comment_confirm_delete':
      // Call submit function to update ecomma_range with node comment info.
      // If comment_delete module isn't enabled.
      $cid = $form['cid']['#value'];
      $result = db_query('SELECT cid FROM {comments} WHERE pid = %d', $cid);
      while ($row = db_fetch_object($result)) {
        $form['#parameters'][1]['post']['children'][] = $row->cid;
      }
      $form['#submit'][] = 'ecomma_comment_delete';
      break;

    case 'comment_delete_form':
      // Call submit function to update ecomma_range with node comment info.
      // If comment_delete module is enabled.
      $cid = $form['cid']['#value'];
      $result = db_query('SELECT cid FROM {comments} WHERE pid = %d', $cid);
      while ($row = db_fetch_object($result)) {
        $form['#parameters'][1]['post']['children'][] = $row->cid;
      }
      $form['#submit'][] = 'ecomma_altern_comment_delete_module';
      break;

    case 'content_field_edit_form':
      // Ecomma enable checkbox will appear on settings for textarea CCK field.
      if ($form['#field']['type'] == "text" && $form['widget']['description']['#type'] == "textarea") {

        $field_name = $form['#field']['field_name'];
        $type_name = $form['#field']['type_name'];

        // Query db table, returns ecomma status (enabled/disabled).
        $q = db_query("SELECT t.ecomma_enabled FROM {ecomma_field_enabled} t WHERE field_name='%s' AND content_type_name='%s'", $field_name, $type_name);
        while ($r = db_fetch_array($q)) {
          $ecomma_enabled_current = $r['ecomma_enabled'];
        }

        if (user_access('ecomma perm admin')) {
          // Add checkbox for ecomma features the settings for.
          $form['widget']['ecomma'] = array(
            '#type' => 'checkbox',
            '#title' => t('Enable ecomma commentary features'),
            '#default_value' => $ecomma_enabled_current,
            '#weight' => 0,
          );
          // Update status of ecomma features for this text field.
          $form['#submit'][] = 'ecomma_settings_field_submit';
        }
      }
      break;

    case 'community_tags_form':
      global $user;
      $form['tags']['#title'] = 'Delete your tags';
      if ($user->uid == 0) {
        $form['new']['#type'] = 'markup';
        $redirect = 'destination=' . drupal_get_path_alias(substr(urldecode(drupal_get_destination()), 12));
        $login_link = l(t('Login'), 'user', array('query' => $redirect, 'alias' => TRUE));
        $register_link = l(t('Register'), 'user/register', array('query' => $redirect, 'alias' => TRUE));
        $user_utilities = $login_link . ' ' . t('or') . ' ' . $register_link;
        $form['new']['#value'] = '<div class="login-prompt">' . $user_utilities . ' to add tags</div>';

        unset($form['tags']);
        unset($form['submit']);
      }
      break;

  }
}

/**
 * Implements hook_comment_submit().
 *
 * When comment is submitted to insert a new database record in ecomma_range
 * database table.
 */
function ecomma_comment_submit($form, &$form_state) {
  global $user;
  $uid = $user->uid;
  $cid = db_result(db_query("SELECT MAX(cid) FROM {comments}"));
  $tid = 0;
  $nid = $form_state['values']['nid'];
  $beg = $_POST['comment-range-beg'];
  $end = $_POST['comment-range-end'];
  $timestamp = strtotime('now');
  if (isset($cid) && arg(0) != "comment") {
    db_query("INSERT INTO {ecomma_range} (rid, nid, vid, uid, tid, cid, beg, end, created) VALUES (NULL, %d, %d, %d, %d, %d, %d, %d, %d);", $nid, $nid, $uid, $tid, $cid, $beg, $end, $timestamp);
  }
  elseif (arg(0) == "comment") {
    db_query("INSERT INTO {ecomma_range} (rid, nid, vid, uid, tid, cid, beg, end, created) VALUES (NULL, %d, %d, %d, %d, %d, %d, %d, %d);", $nid, $nid, $uid, $tid, $cid, $beg, $end, $timestamp);
  }
}

/**
 * Implements hook_comment_delete().
 *
 * To delete the ecomma_range record that corresponds with the comment that is
 * being deleted.
 * Only used if comment_delete module isn't enabled.
 */
function ecomma_comment_delete($form, &$form_state) {
  global $user;
  $uid = $user->uid;
  $nid = $form['#comment']->nid;
  $cid = $form['cid']['#value'];
  if ($form['#parameters'][1]['post']['children'][0] && $form['#parameters'][1]['post']['replies'] == 0) {
    foreach ($form['#parameters'][1]['post']['children'] as $child) {
      db_query("DELETE FROM {ecomma_range} WHERE cid ='%d' AND nid ='%d'", $child, $nid);
      db_query("DELETE FROM {ecomma_range} WHERE cid ='%d' AND nid ='%d' AND uid ='%d'", $cid, $nid, $uid);

    }
  }
  elseif ($form['#parameters'][1]['post']['children'][0] && $form['#parameters'][1]['post']['replies'] == 1) {
    $beg = db_result(db_query("SELECT beg FROM {ecomma_range} WHERE cid ='%d' AND nid ='%d' AND uid ='%d'", $cid, $nid, $uid));
    $end = db_result(db_query("SELECT end FROM {ecomma_range} WHERE cid ='%d' AND nid ='%d' AND uid ='%d'", $cid, $nid, $uid));
    db_query("DELETE FROM {ecomma_range} WHERE cid ='%d' AND nid ='%d' AND uid ='%d'", $cid, $nid, $uid);
    $cid_max = db_result(db_query("SELECT MAX(cid) FROM {comments}"));

    foreach ($form['#parameters'][1]['post']['children'] as $child) {
      db_query("UPDATE {ecomma_range} SET cid ='%d', beg='%d', end ='%d' WHERE cid='%d' AND nid='%d'", $cid_max, $beg, $end, $child, $nid);
      $cid_max++;
    }
  }
  elseif (!$form['#parameters'][1]['post']['children'][0]) {
    db_query("DELETE FROM {ecomma_range} WHERE cid =%d AND nid =%d AND uid =%d", $cid, $nid, $uid);
  }
}

/**
 * Implements hook_altern_comment_delete_module().
 *
 * To delete the ecomma_range record that corresponds with the comment that is
 * being deleted. Only used if comment_delete module isn't enabled.
 */
function ecomma_altern_comment_delete_module($form, &$form_state) {
  global $user;
  $uid = $user->uid;
  $nid = preg_replace('/node\//im', '', $form_state['redirect']);
  $cid = $form['cid']['#value'];
  if ($form['#parameters'][1]['post']['children'][0] && $form['#parameters'][1]['post']['replies'] == 0) {
    db_query("DELETE FROM {ecomma_range} WHERE cid ='%d' AND nid ='%d' AND uid ='%d'", $cid, $nid, $uid);
    foreach ($form['#parameters'][1]['post']['children'] as $child) {
      db_query("DELETE FROM {ecomma_range} WHERE cid ='%d' AND nid ='%d'", $child, $nid);
    }
  }
  elseif ($form['#parameters'][1]['post']['children'][0] && $form['#parameters'][1]['post']['replies'] == 1) {
    $beg = db_result(db_query("SELECT beg FROM {ecomma_range} WHERE cid ='%d' AND nid ='%d' AND uid ='%d'", $cid, $nid, $uid));
    $end = db_result(db_query("SELECT end FROM {ecomma_range} WHERE cid ='%d' AND nid ='%d' AND uid ='%d'", $cid, $nid, $uid));
    db_query("DELETE FROM {ecomma_range} WHERE cid ='%d' AND nid ='%d' AND uid ='%d'", $cid, $nid, $uid);
    $cid_max = db_result(db_query("SELECT MAX(cid) FROM {comments}"));

    foreach ($form['#parameters'][1]['post']['children'] as $child) {
      db_query("UPDATE {ecomma_range} SET cid ='%d', beg='%d', end ='%d' WHERE cid='%d' AND nid='%d'", $cid_max, $beg, $end, $child, $nid);
      $cid_max++;
    }
  }
  elseif (!$form['#parameters'][1]['post']['children'][0]) {
    db_query("DELETE FROM {ecomma_range} WHERE cid =%d AND nid =%d AND uid =%d", $cid, $nid, $uid);
  }
}

/**
 * Implements hook_settings_field_submit().
 */
function ecomma_settings_field_submit($form, &$form_state) {
  $field_name = $form_state['values']['field_name'];
  $type_name = $form_state['values']['type_name'];
  $checkbox_value = $form_state['values']['ecomma'] ? 1 : 0;
  $ecomma_enabled = db_result(db_query("SELECT ecomma_enabled FROM {ecomma_field_enabled} WHERE field_name='%s'", $field_name));
  if ($ecomma_enabled != "") {
    db_query("UPDATE {ecomma_field_enabled} SET field_name='%s', content_type_name='%s', ecomma_enabled=%d  WHERE field_name='%s'", $field_name, $type_name, $checkbox_value, $field_name);
  }
  else {
    db_query("INSERT INTO {ecomma_field_enabled} (field_name, content_type_name, ecomma_enabled) VALUES ('%s', '%s' , %d)", $field_name, $type_name, $checkbox_value);
  }
  drupal_set_message(t('The ecomma commentary features were @ecomma_enabled_status for @fieldname', array('@ecomma_enabled_status' => ($form_state['values']['ecomma'] ? "enabled" : 'disabled'), '@fieldname' => $field_name)));
}

/**
 * Implements hook_block().
 */
function ecomma_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[0]['info'] = t('eComma Word Cloud');
      $blocks[1]['info'] = t('eComma Tag Details');
      $blocks[2]['info'] = t('eComma Comment Cloud');
      $blocks[3]['info'] = t('eComma User Annotation Total');
      return $blocks;

    case 'view':
      if (ctype_digit(arg(1))) {
        $node = menu_get_object();

        switch ($delta) {
          case 0:
            $block['subject'] = t('eComma Word cloud');
            $block['content'] = '<div class="word_cloud">' . t('!word_cloud_final', array('!word_cloud_final' => ecomma_word_cloud($node))) . '</div>';
            break;

          case 1:
            $block['subject'] = t('eComma tag details');
            $view_name = 'ecomma_user_data';
            $view = views_get_view($view_name);
            $view->set_arguments(array(arg(1), "all"));
            $view->execute_display('default');

            if ($view->style_plugin->rendered_fields) {
              $user_data_list = '<ol class="ec-tag-list" id="ec-tag-list">';
              foreach ($view->style_plugin->rendered_fields as $user_data) {
                $tid = $user_data['tid'];
                $uid = $user_data['uid'];
                $rid = $user_data['rid'];
                $beg = $user_data['beg'];
                $end = $user_data['end'];
                $term_name = db_result(db_query("SELECT name FROM { term_data} WHERE  tid='%d'", $tid));
                $date = date('d M Y gA', db_result(db_query("SELECT created FROM {ecomma_range} WHERE  rid='%d'", $rid)));

                $user_data_list .= '<li class="user-data user-data-term' . $tid . '" id="ec-tag-e### ' . $beg . ' ' . $end;
                $user_data_list .= '" style="display: none;" ><div class="ec-tag-item"><a href="" class="term_name">';
                $user_data_list .= check_plain($term_name) . '</a> by ' . theme('username', user_load($uid)) . '</div><div class="ec-tag-date">';
                $user_data_list .= $date . '</div></li>';
              }
              $user_data_list .= '</ol>';
            }

            $block['content'] = $user_data_list;
            break;

          case 2:
            $block['subject'] = t('Comment Cloud');
            $block['content'] = t('<div class="comment_cloud">!comment_texts_final</div>', array('!comment_texts_final' => ecomma_comment_cloud($node)));
            break;

          case 3:
            $block['subject'] = t('User list with annotation count');

            global $base_url;
            $view_name = 'ecomma_user_data';
            $view = views_get_view($view_name);
            $view->set_arguments(array(arg(1), "all"));
            $view->execute_display('default');
            if ($view->style_plugin->rendered_fields) {
              foreach ($view->style_plugin->rendered_fields as $user_data) {
                $uids[] = $user_data['uid'];
              }

              $uids_totals = array_count_values($uids);
              $user_data_table = '<ol class="ec-user-list">';
              foreach ($uids_totals as $uid_key => $uid_total) {
                $user = user_load($uid_key);
                $user_data_table .= '<li class="ec-user-admin"><a href="' . $base_url . '/ecomma_user_data/' . arg(1) . '/';
                $user_data_table .= $uid_key . '">' . $user->name . '</a><span>' . $uid_total . ' annotations</span></li>';
              }
              $user_data_table .= '</ol>';

            }

            $block['content'] = $user_data_table;
            break;
        }

        return $block;
      }
  }
}


/**
 * Implements ecomma_word_cloud().
 *
 * This function formats the content of the eComma enabled text field word
 * cloud block.
 *
 * @param object $node
 *   Current node that contains the eComma enabled text field.
 *
 * @return string
 *   String of the ecomma word cloud block content.
 */
function ecomma_word_cloud($node) {
  // Get name of ecomma enabled text_fields
  $content_type_name = $node->type;
  $content_type_data = content_types($content_type_name);
  $ecomma_enabled = 0;

  if (arg(0) == "node") {
    foreach ($content_type_data['fields'] as $field_name => $field_data) {
      if ($field_data['widget']['type'] == 'text_textarea' && $ecomma_enabled == 0) {
        $ecomma_enabled = db_result(db_query("SELECT ecomma_enabled FROM {ecomma_field_enabled} WHERE field_name='%s' AND content_type_name='%s'", $field_name, $content_type_name));
        $ecomma_field_name = $field_name;
      }
    }
  }

  $whole_text = "";

  // Merging cck field values to whole text.
  foreach ($node->$ecomma_field_name as $field_item) {
    $whole_text .= $field_item['value'];
  }

  // Insert extra space between letter and punctuation (not dashes).
  // (-, exp. est-ce) and appostrophies (', exp. Century's).
  $whole_text = preg_replace("/([^\\x21-\\x26\\x28-\\x2C\\x2E-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E]+)([\\x21-\\x26\\x28-\\x2C\\x2E-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E]+)/u", "$1 $2 ", $whole_text);
  // Splitting into a word array.
  $whole_text = strtolower($whole_text);
  $word_cloud_items = preg_split("/(\s)/", $whole_text);
  if ($word_cloud_items) {
    $words_count_array = array_count_values($word_cloud_items);
    ksort($words_count_array);
    $output = '';

    foreach ($words_count_array as $key => $word_count) {
      $output .= "<h$word_count class='word_cloud_tag'><a href='#'>$key</a></h$word_count>";

    }
  }

  return $output;
}


/**
 * Implements ecomma_comment_cloud().
 *
 * This function formats the comment text of all comments as a word cloud.
 *
 * @return string
 *   String of the ecomma comment-word-cloud block.
 */
function ecomma_comment_cloud($node) {
  $comment_texts = "";
  $sql = "SELECT cid FROM {comments} WHERE nid=%d ORDER BY timestamp DESC";
  $resource = db_query($sql, $node->nid);
  while ($row = db_fetch_array($resource)) {
    $cids[] = $row['cid'];
  }
  if (count($cids) > 0) {
    foreach ($cids as $key => $cid) {
      $sql = "SELECT comment FROM {comments} WHERE cid=%d";
      $resource = db_query($sql, $cid);
      while ($row = db_fetch_array($resource)) {
        $comment_texts .= $row['comment'] . " ";
      }
    }

    $comment_texts = preg_replace("/([^\\x21-\\x26\\x28-\\x2C\\x2E-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E]+)([\\x21-\\x26\\x28-\\x2C\\x2E-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E]+)/u", "$1 $2 ", $comment_texts);

    // Splitting into a word array.
    $comment_texts_items = preg_replace("/<([^>]*)>/", "", $comment_texts);
    $comment_texts_items = preg_split("/(\s)/", strtolower($comment_texts_items));

    if ($comment_texts_items) {
      $words_count_array = array_count_values($comment_texts_items);
      $steps = 6;
      $min = 1e9;
      $max = -1e9;
      $output = '';

      foreach ($words_count_array as $key => $word_count) {
        $output .= "<h$word_count>$key</h$word_count><h$word_weight></h$word_count>";
      }
    }
  }
  return $output;
}


/**
 * Implements hook_views_query_alter().
 */
function ecomma_views_query_alter(&$view, &$query) {
  if ($view->name == 'ecomma_user_data') {
    if (arg(3) == 'nd') {
      $query->orderby[0] = 'nid ASC';
    }
    if (arg(3) == 'dt') {
      $query->orderby[0] = 'created ASC';
    }
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function ecomma_ctools_plugin_api($module, $api) {
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array(
      'version' => 1,
      'path' => drupal_get_path('module', 'ecomma') . '/includes',
    );
  }
}

/**
 * Implements hook_views_api().
 */
function ecomma_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'ecomma') . '/includes',
  );
}
