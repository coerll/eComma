<?php
/**
 * @file
 * The main file for the eComma text annotation module.
 */

/**
 * Implements hook_init().
 */
function ecomma_init() {
  /*drupal_add_http_header('Access-Control-Allow-Origin', '*', TRUE);
  drupal_add_http_header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept', TRUE);*/
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function ecomma_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' || $module == 'panels') {
    return "includes/plugin/$plugin";
  }
}

/**
 * Implements hook_help().
 */
function ecomma_help($path, $arg) {
  switch ($path) {
    case 'admin/help#ecomma':
      if (file_exists($file = drupal_get_path('module', 'ecomma') . '/README.txt')) {
        return '<pre>' . implode("\n", array_slice(explode("\n", @file_get_contents($file)), 2)) . '</pre>';
      }
      break;
  }
}

/**
 * Implements hook_menu().
 */
function ecomma_menu() {
  $items = array();
  $items['tag_range/%/%/%/%'] = array(
    'title' => 'Annotation range',
    'description' => 'Insert term annotation data.',
    'page callback' => 'ecomma_tag_range_function',
    'page arguments' => array(1, 2, 3, 4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/ecomma.ajax.inc',
  );

  $items['tag_range_delete/%/%'] = array(
    'title' => 'Annotation range',
    'description' => 'Insert term annotation data.',
    'page callback' => 'ecomma_tag_range_delete_function',
    'page arguments' => array(1, 2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/ecomma.ajax.inc',
  );

  $items['tag_query/%/%'] = array(
    'title' => 'Tag query',
    'description' => 'Term table query to return data to interface.',
    'page callback' => 'ecomma_tag_query_function',
    'page arguments' => array(1, 2),
    'access arguments' => array('administer site configuration'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/ecomma.ajax.inc',
  );

  $items['comment_query/%/%'] = array(
    'title' => 'Comment query',
    'description' => 'Comment table query to return data to interface.',
    'page callback' => 'ecomma_comment_query_function',
    'page arguments' => array(1, 2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/ecomma.ajax.inc',
  );

  $items['comment_rtl/%'] = array(
    'title' => 'Comment text direction query',
    'description' => 'Comment table query to return text direction.',
    'page callback' => 'ecomma_comment_rtl_function',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/ecomma.ajax.inc',
  );

  $items['comments_active_text/%/%'] = array(
    'title' => 'Comment query',
    'description' => 'Comment table query to return data to interface.',
    'page callback' => 'ecomma_comments_active_text_function',
    'page arguments' => array(1, 2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/ecomma.ajax.inc',
  );

  return $items;
}


/**
 * Implements hook_menu_alter().
 */
function ecomma_menu_alter(&$items) {
  unset($items['node/%node/view']['title']);
  unset($items['node/%node/edit']['title']);
  $items['node/%node/view']['title callback'] = 'ecomma_view_tab_title';
  $items['node/%node/edit']['title callback'] = 'ecomma_edit_tab_title';
  $items['node/%node/view']['title arguments'] = array(1);
  $items['node/%node/edit']['title arguments'] = array(1);
}


/**
 * Callback for tab title of view tab.
 *
 * This function is called on node pages.
 * Returns the title of the view tab.
 *
 * @param string $node
 *   The node of the current node page.
 */
function ecomma_view_tab_title($node) {
  if ($node->type == 'class') {
    return t('All Class Texts');
  }
  return t('View Annotation Text');  
}


/**
 * Callback for tab title of edit tab.
 *
 * This function is called on node pages.
 * Returns the title of the view tab.
 *
 * @param string $node
 *   The node of the current node page.
 */
function ecomma_edit_tab_title($node) {
  if ($node->type == 'class') {
    return t('Edit Class');
  }
  return t('Edit Annotation Text');  
}


/**
 * Implements hook_theme().
 */
function ecomma_theme($existing, $type, $theme, $path) {

  $hooks['views_view__ecomma_user_data__page_1'] = array(
    'template'  => 'templates/views-view--ecomma_user_data--page-1',
    'original hook' => 'views_view',
    'preprocess functions' => array(
      'template_preprocess',
      'template_preprocess_views_view',
    ),
    'arguments' => array('view' => NULL),
  );

  $hooks['ecomma_formatter_myformatter'] = array(
    'variables' => array('node' => NULL, 'field' => NULL),
  );

  return $hooks;
}


/**
 * Implements hook_preprocess_comment().
 */
function ecomma__preprocess_comment(&$variables) {
  $variables['comment']->subject = NULL;
}

/**
 * Implements hook_preprocess_node().
 */
function ecomma_preprocess_node(&$vars) {
  $vars['template_files'][] = 'node-ecomma';
}


/**
 * Returns HTML for ecomma enabled textarea field.
 *
 * @param array $node_vars
 *   An associative array containing:
 *   - node: The node object of the current node.
 *   - text field area of node that is being formatted.
 *
 * @ingroup themeable
 */
function theme_ecomma_formatter_myformatter(array $node_vars) {
  $field = $node_vars['node_field'][LANGUAGE_NONE];
  $whole_text = "";

  // Merging cck field values to whole text.
  // Inserting [paragraph] for later substitution.
  foreach ($field as $field_item) {
    $whole_text .= $field_item['value'] . " paragraphparagraph ";
  }

  // Inserting spaces between every word/punctuation or word/space/punctuation.
  // To use in next step preg_split. Leaving out dash (2D) and underscores (5F).
  $whole_text = preg_replace("/([^\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)([\\x20]+)?([\\x21-\\x26\\x28-\\x2C\\x2E\\x2F\\x3A-\\x40\\x5B-\\x5E\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)([\\x20]+)?/u", "$1 $3 ", $whole_text);

  // Inserting spaces between every word/punctuation or word/space/punctuation.
  // To use in next step preg_split. Leaving out dash (2D) and underscores (5F).
  $whole_text = preg_replace("/([^\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)([\\x20]+)([\\x2D]+)([\\x20]+)/u", "$1 $3 ", $whole_text);

  // Inserting spaces between every word/punctuation or parenthesis/comma.
  $whole_text = preg_replace("/([^\\x29]+)([\\x20]+)?([\\x2C]+)/u", "$1 $3 ", $whole_text);

  // Inserting spaces between word/dash/space. As needed for example in German.
  // Verb prefixes.
  $whole_text = preg_replace("/([^\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)([\\x2D]+)([\\x20]+)/u", "$1 $2 ", $whole_text);

  // Inserting spaces between two punctuation.
  $whole_text = preg_replace("/([\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5E\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)([\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5E\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)/u", "$1 $2 ", $whole_text);

  // Inserting spaces between two punctuation with whitespace.
  $whole_text = preg_replace("/([\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5E\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)([\\x20]+)([\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5E\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)/u", "$1 $2 ", $whole_text);

  // Reducing multiple to single white spaces.
  $whole_text = preg_replace("/([\\x20]+)/u", " ", $whole_text);

  //$whole_text = preg_replace("/(\s)(\n)/", "$2", $whole_text);
  // Splitting string into array. Items will be wrapped in span elements next.
	
  $field_words[] = preg_split("/(\s)(?!\r)|(\s)(\n)/", $whole_text);
  //$field_words[] = preg_split("/(\s)/", $whole_text);

  // Wrap each word/punctuation in span elements.
  $wid = 1;
	$new_word = array();
  foreach ($field_words[0] as $word_key => $word) {
    if ($word != "") {
      // Is a word that contains only letters and is not a paragraph.
      if (preg_match("/[^\\x20-\\x26\\x28-\\x2F\\x3A-\\x3F\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+/", $word)
       && !preg_match("/paragraphparagraph/", $word)) {
        $new_word[] = "<span class='ec-p" . $wid . " token' id='ec-p" . $wid . "'>" . trim($word) . "</span><div id='ec-bgr" . $wid . "' style='display:none;'></div>";
        $wid++;
      }
      // Wrap differently if it is punctuation.
      if (preg_match("/[\\x20-\\x26\\x28-\\x2F\\x3A-\\x3F\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+/", $word)
       && !preg_match("/([\\x20-\\x26\\x28-\\x2F\\x3A-\\x3F\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)([^\\x20-\\x26\\x28-\\x2F\\x3A-\\x3F\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)/", $word)
       && !preg_match("/([^\\x20-\\x26\\x28-\\x2F\\x3A-\\x3F\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)([\\x20-\\x26\\x28-\\x2F\\x3A-\\x3F\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)/", $word)
       && !preg_match("/([^\\x20-\\x26\\x28-\\x2F\\x3A-\\x3F\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)([\\x20-\\x26\\x28-\\x2F\\x3A-\\x3F\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)([^\\x20-\\x26\\x28-\\x2F\\x3A-\\x3F\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)/", $word)) {
        $new_word[] = "<span class='ec-p" . $wid . " token punctuation' id='ec-p" . $wid . "'>" . trim($word) . "</span><div id='ec-bgr" . $wid . "' style='display:none;'></div>";
        $wid++;
      }
      // Wrap differently if it contains punctuation and letters.
      if (preg_match("/([^\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)([\\x20-\\x26\\x28-\\x2F\\x3A-\\x3F]+)([^\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)/u", $word)) {
        //$new_word[] = "<span class='ec-p" . $wid . " token' id='ec-p" . $wid . "'>" . trim($word) . "</span><div id='ec-bgr" . $wid . "' style='display:none;'></div>";
        $wid++;
      }
      // Wrap differently if it is a paragraph marker.
      if (preg_match("/paragraphparagraph/", $word)) {
        $new_word[] = "paragraphparagraph";
      }
    }

    // Have to add unix line break character for later substitution.
    if ($word == "" || preg_match("/paragraphparagraph/", $word)) {
      $new_word[] = "\n";
    }
  }

  // Add all array elements back together.
  $output = implode("<span class=text_space> </span>", $new_word);
  $output = preg_replace("/(\s\s+)/", "\n", $output);

  // Substituting div element with line class for \n unix line break.
  $display_text = "<div class='ecomma_line'>" . preg_replace('/\n/', "</div><div class='ecomma_line'>", $output);
  $display_text = preg_replace("/<div class\=\'ecomma_line\'>(?!.*<div class\=\'ecomma_line\'>)/", "", $display_text);

  // Splitting into paragraphs for final output.
  $fields_array[] = preg_split("/paragraphparagraph/", $display_text);

  $fields_final = '';

  // Final output.
  foreach ($fields_array as $fields_array_item) {
    foreach ($fields_array_item as $fields_array_item_item) {
      $fields_final .= $fields_array_item_item . "\n<br /><br />";
    }
  }

  return $fields_final;

}

/**
 * Implements hook_panels_pane_content_alter().
 */
function ecomma_panels_pane_content_alter($content, $pane, $args, $context) {
  if (array_key_exists('argument_entity_id:node_1', $context)) {
    $content_type_name = $context['argument_entity_id:node_1']->data->type;
    $content_type_data = field_info_instances("node", $content_type_name);

    $node = node_load($context['argument_entity_id:node_1']->data->nid);
    $ecomma_enabled = ecomma_enabled_variable_by_content_type(node_load($context['argument_entity_id:node_1']->data->nid), $context['argument_entity_id:node_1']->data->nid);
    $rtl_enabled = text_direction_variable($context['argument_entity_id:node_1']->data->nid);
	$display = panels_load_display($pane->did);


    foreach ($content_type_data as $field_name => $field_data) {
      if ($field_data['widget']['type'] == 'text_textarea' && $ecomma_enabled == TRUE) {
        if ($ecomma_enabled) {

          if($rtl_enabled){
            foreach ($display->panel_settings as $key => $values) {
              if ($key == 'style_settings') {
              
              // Unique ID of this region.
              $id = $display->did . ':' . $pane->panel;

              if (!empty($values['style']) && $pane->panel == "left") {
                $pane->css += array('css_class' => '');
                $pane->css['css_class'] .= ' rtl_dir';
              }else if(empty($values['style']) && $pane->panel == "left"){
                $pane->css += array('css_class' => '');
                $pane->css['css_class'] = 'rtl_dir';
              }
			  }
            }
          }

          $field_name = $field_data['field_name'];
          if (isset($content)) {
            if ($content->module == 'entity_field') {
              $content->content = theme('ecomma_formatter_myformatter', array('node' => $node, 'node_field' => $node->$field_name));
            }
          }
        }
      }
    }
  }
}


/**
 * Implements hook_node_delete().
 */
function ecomma_node_delete($node) {
  $ecomma_enabled = ecomma_enabled_variable_by_content_type($node, $node->nid);

  if ($ecomma_enabled) {
    db_delete('ecomma_range')
      ->condition('nid', $node->nid)
      ->execute();
	  
    db_delete('ecomma_node_text_direction')
      ->condition('nid', $node->nid)
      ->execute();
  }
}


/**
 * Implements hook_node_prepare().
 */
function ecomma_node_prepare($node) {

  if (array_key_exists('nid', $node)) {
    $ecomma_enabled = ecomma_enabled_variable_by_content_type($node, $node->nid);

    if ($ecomma_enabled) {
      global $user;
      if (!db_query("SELECT created FROM {ecomma_range} WHERE nid =:nid AND uid =:uid", array(':nid' => $node->nid, ':uid' => $user->uid))->fetchField()) {
        $message = t("An eComma text cannot be edited once it was annotated or the annotations will not display correctly.") . "<br />" . t("Please delete all annotations before you edit the text.");
        drupal_set_message($message, 'warning', TRUE);
      }
    }
  }
}


/**
 * Implements hook_form_comment_form_alter().
 */
function ecomma_form_comment_form_alter(&$form, &$form_state, $form_id) {
  // Call submit function to update ecomma_range with node comment info.
  $form['subject'] = NULL;
  $form['author']['_author']['#access'] = FALSE;
  $form['actions']['preview'] = NULL;
  $form['actions']['submit']['#value'] = "Add";
  $form['comment_body'][LANGUAGE_NONE][0]['#rows'] = 3;
  $form['comment_body']['#after_build'][] = 'ecomma_customize_comment_form';
  $form['#submit'][] = 'ecomma_comment_submit';
}


/**
 * Implements hook_form_alter().
 */
function ecomma_form_alter(&$form, &$form_state, $form_id) {
  global $base_url;
  global $user;
  $user_role = "user";

  if (arg(0) == 'node' && ctype_digit(arg(1)) && !array_key_exists(2, arg()) || arg(0) == 'ecomma_user_data') {
    $node = node_load(arg(1));
    $ecomma_enabled = ecomma_enabled_variable_by_content_type($node, $node->nid);

    if ($user->uid == 0) {
      $user_role = "anonymous";
    }

    if ($ecomma_enabled  || arg(0) == 'ecomma_user_data') {
      $form['#attached']['js'][] = array(
        'data' => drupal_get_path('module', 'ecomma') . '/js/ecomma.js',
        'type' => 'file',
      );

      $form['#attached']['js'][] = array(
        'data' => array(
          'ecomma' => array(
            'base_url_var' => $base_url,
            'user_role' => $user_role,
            'ecommaToken' => drupal_get_token(),
          )),
        'type' => 'setting',
      );

      $form['#attached']['css'] = array(
        drupal_get_path('module', 'ecomma') . '/css/ecomma.css' => array(
          'type' => 'file',
        ),
      );
      $form['#attached']['library'][] = array('system', 'ui.dialog');
      $form['#attached']['library'][] = array('system', 'ui.tabs');
      $form['#attached']['library'][] = array('system', 'ui.draggable');
      $form['#attached']['library'][] = array('system', 'ui.droppable');
      $form['#attached']['library'][] = array('system', 'ui.sortable');
    }

  }
  elseif (arg(2) == 'types' && arg(5) == 'fields' && array_key_exists(6, arg()) && array_key_exists('instance', $form)) {
    $ecomma_enabled = ecomma_enabled_variable_by_field_name($form['instance']['field_name']['#value']);
	$text_direction = text_direction_variable($form['instance']['nid']);
  }
  elseif (arg(0) == 'node' && ctype_digit(arg(1)) && arg(2) == "edit") {
    $node = node_load(arg(1));
    $text_direction = text_direction_variable($node->nid);
  }
  else {
    $ecomma_enabled = 0;
	$text_direction = 0;
  }

  switch ($form_id) {
    case 'comment_confirm_delete':
      // Call submit function to update ecomma_range with node comment info.
      // If comment_delete module isn't enabled.
      $form['#submit'][] = 'ecomma_comment_delete';
      break;

    case 'field_ui_field_edit_form':
      // Ecomma enable checkbox will appear on settings for textarea CCK field.
      if ($form['#instance']['widget']['type'] == "text_textarea") {

        // Add checkbox for ecomma features the settings for.
        $form['widget']['ecomma'] = array(
          '#type' => 'checkbox',
          '#title' => t('Enable ecomma commentary features'),
          '#default_value' => $ecomma_enabled,
          '#weight' => 0,
        );
        // Update status of ecomma features for this text field.
        $form['#submit'][] = 'ecomma_settings_field_submit';
      }
      break;

    case 'community_tags_form':
      $form['tags']['#title'] = 'Delete your tags';
      unset($form['tags']['#autocomplete_path']);

      if ($user->uid == 0) {
        $form['new']['#type'] = 'markup';
        $redirect = drupal_get_destination();
        $login_link = l(t('Login'), 'user', array('query' => $redirect));
        $register_link = l(t('Register'), 'user/register', array('query' => $redirect));
        $user_utilities = $login_link . ' ' . t('or') . ' ' . $register_link;
        $form['new']['#value'] = '<div class="login-prompt">' . $user_utilities . ' to add tags</div>';

        unset($form['tags']);
        unset($form['submit']);
      }
      break;

    case 'ecomma_node_form':

      foreach ($form as $key => $element) {
        if (isset($element) && is_array($element)) {
          if (array_key_exists(LANGUAGE_NONE, $element)) {
            if (array_key_exists(0, $element[LANGUAGE_NONE]) && array_key_exists('value', $element[LANGUAGE_NONE][0])) {
              if($element[LANGUAGE_NONE][0]['value']['#type'] == 'textarea') { 
			    if($text_direction) {
				  $form['#attributes']['class'][] = 'rtl_dir';
				}
                $form[$key][LANGUAGE_NONE]['add_more']['#value'] = t('Add another paragraph');
				$form['actions']['preview']['#access'] = FALSE;
              }
            }
          }
        }
      }
	  		
      // Add checkbox for ecomma features the settings for.
	  $form['additional_settings']['ecomma']['rtl'] = array(
	  '#type' => 'checkbox',
	  '#title' => t('Enable right-to-left text direction'),
	  '#default_value' => $text_direction, 
	  '#description' => t('For languages such as Hebrew and Arabic.'));
		  
	  $form['some_text'] = array(
	    '#markup' => '<div id="word_count_message"><span class="label">Recommended length:</span> 200 words (faster page loading)<br /><span class="label">Max length:</span> 500 words</div><div id="word_count_wrapper"><span class="label">Word Count: </span><span id="word_count"></span></div><div id="word_count_overlimit">The text saving option is disabled until you lower the word count (max: 500).</div><div id="text_input_note"><span class="label"></span>Place each paragraph into a separate textarea. Avoid line breaks and empty lines inside textareas, unless you want to display a line number at the beginning of a line.</div>'
	  );
		  
      $form['#attached']['js'][] = array(
        'data' => drupal_get_path('module', 'ecomma') . '/js/ecomma_node_form.js',
        'type' => 'file',
      );

      $form['#attached']['js'][] = array(
        'data' => array(
          'ecomma' => array(
            'base_url_var' => $base_url,
            'user_role' => $user_role,
            'ecommaToken' => drupal_get_token(),
          )),
        'type' => 'setting',
      );

      $form['#attached']['css'] = array(
        drupal_get_path('module', 'ecomma') . '/css/ecomma_node_form.css' => array(
          'type' => 'file',
        ),
      );
		  

	  break;

    case 'node_delete_confirm';
	  $form['#submit'][] = 'delete_path_submit';
	  break;
  }
}


/**
 * Function is called after a node is deleted. 
 *
 * @return 
 *   Redirects to Group the deleted node belonged to.
 */

function delete_path_submit($form, &$form_state) {
  $gid = $form['#node']->og_group_ref[LANGUAGE_NONE][0]['target_id'];
  
  drupal_goto('node/' . $gid);
}


/**
 * Implements hook_customize_comment_form().
 *
 * Removig farmatting options for this website.
 * database table.
 */
function ecomma_customize_comment_form(&$form) {
  $form[LANGUAGE_NONE][0]['format']['#access'] = FALSE;
  return $form;
}


/**
 * Implements hook_comment_submit().
 *
 * Comment is submitted to insert a new database record in ecomma_range
 * database table. But no record is entered if comment is edited.
 */
function ecomma_comment_submit($form, &$form_state) {

  global $user;
  $uid = $user->uid;
  $cid = db_query('SELECT MAX(c.cid) from {comment} c')->fetchField();
  $tid = 0;
  $nid = $form_state['values']['nid'];
  $vid = db_select('node', 'n')
  ->fields('n', array('vid'))
  ->condition('n.nid', $nid)
  ->execute()
  ->fetchField();

  if (array_key_exists('input', $form_state)) {
    if (array_key_exists('comment-range-beg', $form_state['input'])) {
      $beg = $form_state['input']['comment-range-beg'];
      $end = $form_state['input']['comment-range-end'];
    }
  }
  $timestamp = strtotime('now');

  $pid = $form_state['comment']->pid;

  if (isset($cid) && isset($beg) && isset($end) && $pid == 0) {
      if(!preg_match('/([^\.]*)\.(.*)/', $form_state['comment']->thread)){
      db_insert('ecomma_range')
      ->fields(array(
        'rid' => NULL,
        'nid' => $nid,
        'vid' => $vid,
        'uid' => $uid,
        'tid' => $tid,
        'cid' => $cid,
        'beg' => $beg,
        'end' => $end,
        'created' => $timestamp,
      ))->execute();
    }
    else {
      if (isset($beg) && isset($end)){
        $range = db_select('ecomma_range', 'e')
        ->fields('e', array('beg', 'end'))
        ->condition('e.cid', $pid)
        ->execute()
        ->fetchAssoc();

        db_insert('ecomma_range')
        ->fields(array(
          'rid' => NULL,
          'nid' => $nid,
          'vid' => $vid,
          'uid' => $uid,
          'tid' => $tid,
          'cid' => $cid,
          'beg' => $range['beg'],
          'end' => $range['end'],
          'created' => $timestamp,
        ))->execute();
      }
    }
  }
}

/**
 * Implements hook_comment_delete().
 *
 * To delete the ecomma_range record that corresponds with the comment that is
 * being deleted.
 * Only used if comment_delete module isn't enabled.
 */
function ecomma_comment_delete($comment) {
  if (array_key_exists('nid', $comment)) {
    global $user;
    $uid = $user->uid;
    $nid = $comment->nid;
    $cid = $comment->cid;
    $pid = $comment->pid;

    if ($pid != 0) {
      $children = db_select('comment', 'c')
      ->fields('c', array('cid'))
      ->condition('c.pid', $pid)
      ->execute()
      ->fetchAll();

      if (array_key_exists(0, $children)) {
        $beg = db_select('ecomma_range', 'e')
        ->fields('e', array('beg'))
        ->condition('nid', $nid)
        ->condition('cid', $cid)
        ->condition('uid', $uid)
        ->execute()
        ->fetchField;

        $end = db_select('ecomma_range', 'e')
        ->fields('e', array('end'))
        ->condition('nid', $nid)
        ->condition('cid', $cid)
        ->condition('uid', $uid)
        ->execute()
        ->fetchField;

        foreach ($children as $child) {
          db_update('ecomma_range')
          ->fields(array(
            'beg' => $beg,
            'end' => $end,
          ))
          ->condition('cid', $child)
          ->condition('nid', $nid)
          ->execute();
        }
      }
    }

    db_delete('ecomma_range')
    ->condition('cid', $cid)
    ->condition('nid', $nid)
    ->condition('uid', $uid)
    ->execute();
  }
}


/**
 * Implements hook_node_submit().
 */

function ecomma_node_submit($node, $form, &$form_state) {
  $ecomma_enabled = ecomma_enabled_variable_by_content_type($node, $node->nid);
  if ($ecomma_enabled) {
    $checkbox_value = $form_state['values']['rtl'] ? 1 : 0;
    $nid = $form_state['node']->nid;

    $text_direction = text_direction_variable($nid);

    if ($text_direction != "" && $text_direction != NULL) {
      db_update('ecomma_node_text_direction')
      ->fields(array(
        'rtl_enabled' => $checkbox_value,
      ))
      ->condition('nid', $nid)
      ->execute();
    }
    else {

      if(isset($node->nid)) {
        $nid_existing = $nid;
	  }
	  else {  
        global $user;

        $entity = array(
          'type' => 'article',
          'title' => 'Example node',
          'uid' => $user->uid,
          'created' => REQUEST_TIME
        );
        $node_prev = entity_create('node', $entity);
        node_save($node_prev);
        $nid_existing = $node_prev->nid;
	    $nid_existing++;
	  
	    db_delete('node')
	      ->condition('nid', $node_prev->nid)
	      ->execute();
	  }

      db_insert('ecomma_node_text_direction')
        ->fields(array(
        'nid' => $nid_existing,
        'cid' => 0,
        'rtl_enabled' => $checkbox_value,
        ))->execute();

    }
    if($text_direction != $checkbox_value) {
      drupal_set_message(t('Left-to-rigth text direction was @ecomma_text_diretion_status', array('@ecomma_text_diretion_status' => ($form_state['values']['rtl'] ? "enabled" : 'disabled'))));
    }
  }
}


/**
 * Implements hook_settings_field_submit().
 */
function ecomma_settings_field_submit($form, &$form_state) {
  $field_name = $form_state['values']['instance']['field_name'];
  $type_name = $form_state['values']['instance']['bundle'];
  $checkbox_value = $form_state['values']['ecomma'] ? 1 : 0;
  $ecomma_enabled = ecomma_enabled_variable_by_field_name($form['instance']['field_name']['#value']);

  if ($ecomma_enabled != "") {
    db_update('ecomma_field_enabled')
    ->fields(array(
      'content_type_name' => $type_name,
      'ecomma_enabled' => $checkbox_value,
    ))
    ->condition('field_name', $field_name)
    ->execute();
  }
  else {
    db_insert('ecomma_field_enabled')
      ->fields(array(
        'field_name' => $field_name,
        'content_type_name' => $type_name,
        'ecomma_enabled' => $checkbox_value,
      ))->execute();
    drupal_set_message(t('The ecomma commentary features were @ecomma_enabled_status for @fieldname', array('@ecomma_enabled_status' => ($form_state['values']['ecomma'] ? "enabled" : 'disabled'), '@fieldname' => $field_name)));
  }
}


/**
 * Implements hook_block_info().
 */
function ecomma_block_info() {
  $blocks = array();
  $blocks['ecomma_word_cloud'] = array(
    'info' => t('eComma Word Cloud'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['ecomma_tag_details'] = array(
    'info' => t('eComma Tag Details'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['ecomma_comment_cloud'] = array(
    'info' => t('eComma Comment Cloud'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['ecomma_user_annotation_total'] = array(
    'info' => t('eComma User Annotation Total'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function ecomma_block_view($delta = '') {
  global $user;

  if (ctype_digit(arg(1))) {
    $node = menu_get_object();

    $block = array();
    switch ($delta) {
      case 'ecomma_word_cloud':
        $block['subject'] = t('eComma Word Cloud');
        $block['content'] = t('<div class="word_cloud">!word_cloud_final</div>', array('!word_cloud_final' => ecomma_word_cloud($node)));
        break;

      case 'ecomma_tag_details':
        $view_name = 'ecomma_user_data';
        $view = views_get_view($view_name);
        $view->set_arguments(array(arg(1), "all"));
        $view->execute_display('default');
        $user_data_list = "";

        if ($view->result) {
          $user_data_list = '<ol class="ec-tag-list" id="ec-tag-list">';
          foreach ($view->result as $user_data) {
            $tid = $user_data->ecomma_range_tid;
            $rid = $user_data->ecomma_range_rid;
            $beg = $user_data->ecomma_range_beg;
            $end = $user_data->ecomma_range_end;
            $uid = $user_data->ecomma_range_uid;

            $term_name = db_select('taxonomy_term_data', 't')
            ->fields('t', array('name'))
            ->condition('t.tid', $tid)
            ->execute()
            ->fetchField();

            $timestamp = db_select('ecomma_range', 'e')
            ->fields('e', array('created'))
            ->condition('e.rid', $rid)
            ->execute()
            ->fetchField();

            $date = date('d M Y gA', $timestamp);
            $current_user = user_load($uid);
            $user_name = theme('username', array('account' => $current_user));
            $user_data_list .= '<li class="user-data user-data-term' . $tid . '" id="ec-tag-e### ' . $beg . ' ' . $end;
            $user_data_list .= '" style="display: none;" ><div class="ec-tag-item">';
            $user_data_list .= l($term_name, '', array(
              'fragment' => '',
              'external' => TRUE,
              'attributes' => array('class' => "term_name"),
            ));
            $user_data_list .= ' by ' . l(strip_tags($user_name), '', array('fragment' => '', 'external' => TRUE)) . '</div><div class="ec-tag-date">';
            $user_data_list .= $date . '</div></li>';
          }
          $user_data_list .= '</ol>';
        }
        $block['subject'] = t('eComma Tag Details');
        $block['content'] = $user_data_list;
        break;

      case 'ecomma_comment_cloud':
        $block['subject']  = t('eComma Comment Cloud');
		$block['content'] = 'The comment cloud can currently not be displayed. We are aware of the problem and are working on a solution.';
        break;

      case 'ecomma_user_annotation_total':
        $user_data_table = "";
        $view_name = 'ecomma_user_data';
        $view = views_get_view($view_name);
        $view_name2 = 'ecomma_user_child_comments';
        $view2 = views_get_view($view_name2);

		if($view && $view2){
          $view->set_arguments(array(arg(1), "all"));
          $view->execute_display('default');
          $view2->set_arguments(array(arg(1), "all"));
          $view2->execute_display('default');
		}
			
		$uid_key = 0;
		if ($view->result && $view2->result) {
          foreach ($view->result as $user_data) {
            $uids[$uid_key] = $user_data->ecomma_range_uid;
            $uid_key++;
          }

          foreach ($view2->result as $user_data2){
            $uids[$uid_key] = $user_data2->comment_uid;
			$uid_key++;
          }

          $uids_totals = array_count_values($uids);
          $user_data_table = '<ol class="ec-user-list">';

          foreach ($uids_totals as $uid_key => $uid_total) {
            $current_user = user_load($uid_key);
            $user_data_table .= '<li class="ec-user-admin">';
            $user_name = theme('username', array('account' => $current_user));
            $user_data_table .= l(strip_tags($user_name), 'ecomma_user_data/' . arg(1) . '/' . $uid_key);
            $user_data_table .= '<span>' . $uid_total . ' annotations</span></li>';
          }
          $user_data_table .= '</ol>';
		}

        $block['subject'] = t('eComma User Annotation Total');
        $block['content'] = $user_data_table;
        break;

    }
    return $block;
  }
}


/**
 * This formats the content of the eComma enabled text field word cloud block.
 *
 * @param object $node
 *   Current node that contains the eComma enabled text field.
 *
 * @return string
 *   String of the ecomma word cloud block content.
 */
function ecomma_word_cloud($node) {
  // Get name of ecomma enabled text_fields
  $content_type_name = $node->type;
  $content_type_data = field_info_instances("node", $content_type_name);
  $ecomma_enabled_check = 0;
  $ecomma_field_name = "";
  $ecomma_enabled = ecomma_enabled_variable_by_content_type($node, $node->nid);

  if (arg(0) == "node") {
    foreach ($content_type_data as $field_name => $field_data) {
      if ($field_data['widget']['type'] == 'text_textarea' && $ecomma_enabled_check == 0) {
        $ecomma_enabled_check = $ecomma_enabled;
        $ecomma_field_name = $field_name;
      }
    }
  }

  $paragraph_text = array();
  $output = '';

  // Merging cck field values to whole text.
  if ($ecomma_field_name != "") {
    foreach ($node->$ecomma_field_name as $field_item) {
      foreach ($field_item as $field_item_paragraph) {
        $paragraph_text[] = $field_item_paragraph['value'];
      }
    }

    $whole_text = implode(" ", $paragraph_text);

    // Insert extra space between letter and punctuation (not dashes).
    // (-, exp. est-ce) and appostrophies (', exp. Century's).
    $whole_text = preg_replace("/([^\\x21-\\x26\\x28-\\x2C\\x2E-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E]+)([\\x21-\\x26\\x28-\\x2C\\x2E-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E]+)/u", "$1 $2 ", $whole_text);
    // Splitting into a word array.
    $whole_text = strtolower($whole_text);
    $word_cloud_items = preg_split("/(\s)/", $whole_text);
    if ($word_cloud_items) {
      $words_count_array = array_count_values($word_cloud_items);
      ksort($words_count_array);
      unset($words_count_array['']);

      $output = '';
      $increase_all = '';

      if (array_key_exists(0, $words_count_array)) {
        $max = max($words_count_array);
        $min = min($words_count_array);
	  } else {
	    $max = 0;
	    $min = 0;
	  }

      $min_font = 1;
      $max_font = 6;
      $diff = $max - $min;
      $min_font = 1;
      $max_font = 6;
      if ($diff == 0) {
        $diff = 1;
      }
      $multiplier = ($max_font - $min_font) / ($diff);

      foreach ($words_count_array as $key => $word_count) {
        $title_size = round($min_font + (($max - ($max - ($word_count - $min))) * $multiplier));
        if ($title_size < 1 || $increase_all == TRUE) {
          if ($title_size < 1) {
            $title_size = 1;
          }
          else {
            $title_size++;
          }
          $increase_all = TRUE;
        }
        $output .= "<h$title_size class='word_cloud_tag'>" . l($key, '#') . "</h$title_size>";
      }

    }
  }

  preg_match_all('/h([\d][\d]?[\d]?)/', $output, $h_array);
 
  $h_min = 6;
  $h_max = 1200;
  $newNumbers = array_filter(
    $h_array,
    function ($value) use($min,$max) {
      return ($value >= $min && $value <= $max);
    }
  );

  if (!array_key_exists(0, $newNumbers)) {
	$output = (preg_replace_callback("/h([\d][\d]?[\d]?)/", function ($matches){ return "h" . round($matches[1]/6); }, $output));
  }

  return $output;
}


/**
 * This function formats the comment text of all comments as a word cloud.
 *
 * @return string
 *   String of the ecomma comment-word-cloud block.
 */
function ecomma_comment_cloud($node) {
  $comment_texts = "";
  $output = "";
  $query = db_select('comment', 'c');
  $query->join('ecomma_range', 'e', 'c.nid = e.nid');
  $cids = $query->fields('c', array('cid'))
    ->condition('c.nid', $node->nid)
    ->orderBy("c.created", "DESC")
    ->execute()
    ->fetchAll();

  if (array_key_exists(0, $cids)) {
    foreach ($cids as $cid_item) {
      $all_cids[] = $cid_item->cid;
    }

    if (count($all_cids) > 0) {
      foreach ($all_cids as $key => $cid) {
        $texts = db_select('field_data_comment_body', 'f')
        ->fields('f', array('comment_body_value'))
        ->condition('f.entity_id', $cid)
        ->execute();

        foreach ($texts as $texts_item) {
          $all_texts[] = $texts_item->comment_body_value;
        }
      }

      $comment_texts = implode(" ", $all_texts);
      $comment_texts = preg_replace("/([^\\x21-\\x26\\x28-\\x2C\\x2E-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E]+)([\\x21-\\x26\\x28-\\x2C\\x2E-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E]+)/u", "$1 $2 ", $comment_texts);

      // Splitting into a word array.
      $comment_texts_items = preg_replace("/<([^>]*)>/", "", $comment_texts);
      $comment_texts_items = preg_split("/(\s)/", strtolower($comment_texts_items));

      if ($comment_texts_items) {
        $words_count_array = array_count_values($comment_texts_items);
        ksort($words_count_array);
        unset($words_count_array['']);

        $output = '';
        $increase_all = '';

        $max = max($words_count_array);
        $min = min($words_count_array);
        $diff = $max - $min;
        $min_font = 1;
        $max_font = 6;
        if ($diff == 0) {
          $diff = 1;
        }
        $multiplier = ($max_font - $min_font) / ($diff);

        foreach ($words_count_array as $key => $word_count) {
          $title_size = round($min_font + (($max - ($max - ($word_count - $min))) * $multiplier));
          if ($title_size < 1 || $increase_all == TRUE) {
            if ($title_size < 1) {
              $title_size = 1;
            }
            else {
              $title_size++;
            }
            $increase_all = TRUE;
          }
          $output .= "<h$title_size>$key</h$title_size>";
        }
      }
    }
  }
  return $output;
}

/**
 * Get the shared static $ecomma_enabled variable.
 *
 * @return int
 *   The value of the $user->realname variable.
 */
function ecomma_display_username() {
  $uid = arg(2);
  $author = user_load($uid);

  // Display the user's realname instead of name.
  if (property_exists($author, 'realname')) {
    if (isset($author->realname) && $author->realname != "") {
      return $author->realname;
    } else {
      return $author->name;
    }
  } else {
    return $author->name;
  }
}


/**
 * Implements hook_query_alter().
 */
function ecomma_query_alter(&$query) {
  if (arg(3) == 'nd' || arg(3) == 'dt') {
    if (isset($query->alterMetaData)) {
      if ($query->alterMetaData['view']->name == 'ecomma_user_data') {
        if (arg(3) == 'nd') {
          $query->orderby[0] = 'nid ASC';
        }
        if (arg(3) == 'dt') {
          $query->orderby[0] = 'created ASC';
        }
      }
    }
  }
}


/**
 * Implements hook_ctools_plugin_api().
 */
function ecomma_ctools_plugin_api($module, $api) {
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array(
      'version' => 1,
      'path' => drupal_get_path('module', 'ecomma') . '/includes',
    );
  }
}


/**
 * Implements hook_views_api().
 */
function ecomma_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'ecomma') . '/includes',
  );
}


/**
 * Get the shared static $ecomma_enabled variable.
 *
 * @return int
 *   The value of the $ecomma_enabled variable.
 */
function ecomma_enabled_variable_by_content_type($node, $nid) {
  if (isset($node)) {
    $query = db_select('ecomma_field_enabled', 'f');
    $query->join('node', 'n', 'f.content_type_name = n.type');
    $ecomma_enabled = $query
      ->fields('f', array('ecomma_enabled'))
      ->condition('n.nid', $nid)
      ->execute()
      ->fetchField();

    return $ecomma_enabled;
  }
}


/**
 * Get the shared static $ecomma_enabled variable.
 *
 * @return int
 *   The value of the $ecomma_enabled variable.
 */
function ecomma_enabled_variable_by_field_name($fieldname) {
  if (isset($fieldname)) {
    $query = db_select('ecomma_field_enabled', 'f');
    $ecomma_enabled = $query
      ->fields('f', array('ecomma_enabled'))
      ->condition('f.field_name', $fieldname)
      ->execute()
      ->fetchField();

    return $ecomma_enabled;
  }
}


/**
 * Get the shared static $text_direction variable.
 *
 * @return int
 *   The value of the $text_direction variable.
 */
function text_direction_variable($nid) {
  if (isset($nid)) {
    $query = db_select('ecomma_node_text_direction', 'f');
    $text_direction = $query
      ->fields('f', array('rtl_enabled'))
      ->condition('f.nid', $nid)
      ->execute()
      ->fetchField();

    return $text_direction;
  }
}

