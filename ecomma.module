<?php
/**
 * @file
 * ecomma module to enable annotation for CCK textfield (textarea widget).
 */

/**
 * Implements hook_preprocess_page().
 */
function ecomma_preprocess_page(&$vars) {
  if (isset($vars['node'])) {
    global $base_url;
    $content_type_name = $vars['node']->type;
    $content_type_data = content_types($content_type_name);
    $ecomma_enabled = 0;

    $type_nid = $node->nid;
    $type_vid = $node->vid;
    $cck_field_name = "content_" . $field_name;
    $value_field = $field_name . "_value";

    $user_role = "user";
    if ($vars['node']->uid == 0) {
      $user_role = "anonymous";
    }

    module_load_include('inc', 'ecomma', 'ecomma');

    if (isset($content_type_data)) {
      foreach ($content_type_data['fields'] as $field_name => $field_data) {
        if ($field_data['widget']['type'] == 'text_textarea' && $ecomma_enabled == 0) {
          if (db_result(db_query("SELECT ecomma_enabled FROM {ecomma_field_enabled} WHERE field_name='%s' AND content_type_name='%s'", $field_name, $content_type_name))) {
            $ecomma_enabled = db_result(db_query("SELECT ecomma_enabled FROM {ecomma_field_enabled} WHERE field_name='%s' AND content_type_name='%s'", $field_name, $content_type_name));
            $ecomma_field_name = $field_name;
          }
        }
      }
    }

    if (isset($vars['node'], $vars['node']->type) && $ecomma_enabled) {
      drupal_add_css(drupal_get_path('module', 'ecomma') . '/css/ecomma.css');
      drupal_add_css(libraries_get_path('jquery.ui') . '/themes/base/jquery-ui.css');
      $vars['styles'] = drupal_get_css();
      drupal_add_js(drupal_get_path('module', 'ecomma') . '/js/ecomma.js');
      jquery_ui_add(array(
        'ui.dialog',
        'ui.tabs',
        'ui.draggable',
        'ui.droppable',
        'ui.sortable',
      ));
      drupal_add_js(array(
        'ecomma' => array(
          'base_url_var' => $base_url,
          'user_role' => $user_role,
          'ecommaToken' => drupal_get_token(),
        )),
        'setting'
      );
    }
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function ecomma_ctools_plugin_directory($module, $plugin) {
  return "includes/plugin/$plugin";
}

/**
 * Implements hook_perm().
 */
function ecomma_perm() {
  return array('ecomma_perm_admin');
}

/**
 * Implements hook_help().
 */
function ecomma_help($path, $arg) {
  switch ($path) {
    case 'admin/help#ecomma':
      if (file_exists($file = drupal_get_path('module', 'ecomma') . '/templates/help.tpl.php')) {
        return t(@file_get_contents($file), array('@module_path' => base_path() . drupal_get_path('module', 'ecomma')));
      }
  }
}

/**
 * Implements hook_menu().
 */
function ecomma_menu() {

  $items['tag_range/%/%/%/%'] = array(
    'title' => 'Annotation range',
    'description' => 'Insert term annotation data.',
    'page callback' => 'ecomma_tag_range_function',
    'page arguments' => array(1, 2, 3, 4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['tag_range_delete/%/%'] = array(
    'title' => 'Annotation range',
    'description' => 'Insert term annotation data.',
    'page callback' => 'ecomma_tag_range_delete_function',
    'page arguments' => array(1, 2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['tag_query/%/%'] = array(
    'title' => 'Tag query',
    'description' => 'Term table query to return data to interface.',
    'page callback' => 'ecomma_tag_query_function',
    'page arguments' => array(1, 2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['comment_query/%/%'] = array(
    'title' => 'Comment query',
    'description' => 'Comment table query to return data to interface.',
    'page callback' => 'ecomma_comment_query_function',
    'page arguments' => array(1, 2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['comments_active_text/%/%'] = array(
    'title' => 'Comment query',
    'description' => 'Comment table query to return data to interface.',
    'page callback' => 'ecomma_comments_active_text_function',
    'page arguments' => array(1, 2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['enabled_callback/%'] = array(
    'title' => 'Textfield ecomma enabled status',
    'description' => 'Check if ecomma textfield was enabled.',
    'page callback' => 'ecomma_enabled_query_function',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Ajax callback for hook_tag_range_function().
 *
 * This function is called after a term is submitted to community tags module
 * function. Updates the ecomma_range table with information about the selected
 * text range in the node view of the ecomma CCK textfield.
 *
 * @param string $tag
 *   The term name gets entered into the new database record.
 * @param int $nid
 *   The node id gets entered into the new database record.
 * @param int $beg
 *   The id number of the first word of the text range gets entered into the new
 *   database record.
 * @param int $end
 *   The id number of the last word of the text range gets entered into the new
 *   database record.
 */
function ecomma_tag_range_function($tag, $nid, $beg, $end) {
  if (empty($_POST["from_js"])) {
    return;
  }

  global $user;
  $uid = $user->uid;

  $tid_existing = taxonomy_get_term_by_name($tag);
  $vid = db_result(db_query("SELECT vid FROM {node} WHERE nid='%d'", $nid));

  if ($vid == "") {
    $result = db_query("SELECT vid FROM {node} WHERE nid='%d'", $nid);
    while ($data = db_fetch_object($result)) {
      $vid = $data->vid;
    }
  }

  if ($tid_existing == "") {
    $tid = db_result(db_query("SELECT MAX(tid) FROM { term_data}")) + 1;
  }
  else {
    $tid = $tid_existing;
  }

  $cid = 0;

  $timestamp = strtotime('now');
  if ($uid == $record_uid && isset($_POST['ecomma_token']) && drupal_valid_token($_POST['ecomma_token'])) {
    $result_db = db_query("INSERT INTO {ecomma_range} (rid, nid, vid, uid, tid, cid, beg, end, created) VALUES (NULL, %d, %d, %d, %d, %d, %d, %d, %d);", $nid, $vid, $uid, $tid, $cid, $beg, $end, $timestamp);
  }
}

/**
 * Ajax callback for hook_tag_range_delete_function().
 *
 * This function is called after a term is deleted from to community terms.
 * Updates the ecomma_range table with information about the deleted tag term.
 *
 * @param string $tag
 *   The term name of the ecomma_range database table record that needs to be
 *   deleted.
 * @param int $nid
 *   The node id of the ecomma_range database table record that needs to be
 *   deleted.
 */
function ecomma_tag_range_delete_function($tag, $nid) {
  if (empty($_POST["from_js"])) {
    $message = 'eComma tag delete function was not evoked by ajax call';
    ecomma_watchdog($message);
    return;
  }

  global $user;
  $uid = $user->uid;

  // Still to decide: maybe need to delete from Community tags tables?
  $tid_existing = db_result(db_query("SELECT tid FROM { term_data} WHERE name='%s'", $tag));
  $vid = db_result(db_query("SELECT MAX(vid) FROM { term_data} WHERE  name='%s'", $tag));
  $record_uid = db_result(db_query("SELECT uid FROM {ecomma_range} WHERE  tid ='%d' AND nid ='%d'", $tid_existing, $nid));
  if ($uid == $record_uid && isset($_POST['ecomma_token']) && drupal_valid_token($_POST['ecomma_token'])) {
    $result_db = db_query("DELETE FROM {ecomma_range} WHERE uid ='%d' AND tid ='%d' AND nid ='%d'", $uid, $tid_existing, $nid);
    _community_tags_delete_tag($nid, $tid_existing, $uid);
  }
}


/**
 * Ajax callback for hook_tag_query_function().
 *
 * This function is called on page load to save tag info in js arrays.
 *
 * @param string $tag
 *   The term name of the returned ecomma_range database table records.
 * @param int $nid
 *   The node id of the ecomma_range database table record that needs
 *   to be deleted.
 *
 * drupal_json()
 *   a json array with element 'beg' giving the id number of the first
 *   word of the text range, 'end' giving the id number of the last word
 *   of the text range, 'tid' giving the term id number of the ecomma_range
 *   table record, and 'totals' counting the number of records which are
 *   expected to be returned from the ecomma_range table
 */
function ecomma_tag_query_function($tag, $nid) {
  $tid_existing = db_result(db_query("SELECT tid FROM {term_data} WHERE  name='%s'", $tag));
  $all_ranges = "";
  $result = db_query("SELECT beg, end, tid, count(tid) as totals FROM {ecomma_range} WHERE  tid='%d' AND nid ='%d'", $tid_existing, $nid);
  drupal_json(db_fetch_object($result));
}

/**
 * Ajax callback for hook_comment_query_function().
 *
 * This function is called on page load to save the comment info in js arrays.
 *
 * @param int $cid
 *   The comment id of the returned ecomma_range database table records.
 * @param int $nid
 *   The node id of the ecomma_range database table record that needs to
 *   be deleted.
 */
function ecomma_comment_query_function($cid, $nid) {
  $range = "";
  $result = db_query("SELECT beg, end FROM {ecomma_range} WHERE cid='%d'AND nid='%d'", $cid, $nid);
  while ($data = db_fetch_object($result)) {
    $range = $data->beg . " " . $data->end;
  }

  print $range;
}

/**
 * Ajax callback for hook_comments_active_text_function().
 *
 * This function is called on when comment text is highlighted.
 *
 * @param int $beg
 *   The id number of the first word of the text range that is
 *   related to the comment content to be displayed.
 * @param int $nid
 *   The node id of the ecomma_range database table record that
 *   is related to the comment content to be displayed.
 */
function ecomma_comments_active_text_function($beg, $nid) {
  $comments_text_hi = "";
  $result = db_query("SELECT r.cid, r.end, r.uid, u.name, c.timestamp, c.comment FROM {ecomma_range} r LEFT JOIN {users} u ON r.uid = u.uid LEFT JOIN {comments} c ON c.cid = r.cid WHERE r.beg='%d' AND r.nid='%d' AND r.tid='0'", $beg, $nid);
  drupal_json(db_fetch_object($result));
}

/**
 * Ajax callback for hook_enabled_query_function().
 *
 * This function is called on to check if ecomma textfield was enabled.
 *
 * @param int $nid
 *   The node id of the ecomma_enabled database table record that checks
 *   if the node contains an ecomma activated/enabled textfield.
 */
function ecomma_enabled_query_function($nid) {
  $content_type = db_result(db_query("SELECT type FROM {node} WHERE nid='%d'", $nid));
  $ecomma_enabled = db_result(db_query("SELECT ecomma_enabled FROM {ecomma_field_enabled} WHERE content_type_name='%s'", $content_type));
  print $ecomma_enabled;
}

/**
 * Implements hook_theme().
 */
function ecomma_theme($existing, $type, $theme, $path) {

  $hooks['views_view__ecomma_user_data__page_1'] = array(
    'template'  => 'templates/views-view--ecomma_user_data--page-1',
    'original hook' => 'views_view',
    'preprocess functions' => array(
      'template_preprocess',
      'template_preprocess_views_view',
    ),
    'arguments' => array('view' => NULL),
  );

  $hooks['ecomma_formatter_myformatter'] = array(
    'preprocess functions' => array(
      'template_preprocess',
      'template_preprocess_views_view',
    ),
    'arguments' => array('node' => NULL, 'field' => NULL),
  );

  return $hooks;
}


/**
 * Implements hook_theme_registry_alter().
 */
function ecomma_theme_registry_alter(&$theme_registry) {
  $modulepath = drupal_get_path('module', 'ecomma');
  array_unshift($theme_registry['node']['theme paths'], $modulepath . '/templates');
  $functions =& $theme_registry['comment']['preprocess functions'];
  $index = array_flip($functions);
  array_splice($functions, $index['template_preprocess_comment'], 0, array('ecomma__preprocess_comment'));/**/
}

/**
 * Implements hook_preprocess_comment().
 */
function ecomma__preprocess_comment(&$variables) {
  $variables['comment']->subject = NULL;
}

/**
 * Implements hook_preprocess_node().
 */
function ecomma_preprocess_node(&$vars) {
  $vars['template_files'][] = 'node-ecomma';
}

/**
 * Implements hook_ecomma_formatter_myformatter().
 */
function theme_ecomma_formatter_myformatter($node, $field) {
  $whole_text = "";

  // Merging cck field values to whole text.
  // Inserting [paragraph] for later substitution.
  foreach ($field as $field_key => $field_item) {
    $whole_text .= $field_item['value'] . " paragraphparagraph ";
  }

  // Inserting spaces between every word/punctuation or word/space/punctuation.
  // To use in next step preg_split. Leaving out dash (2D) and underscores (5F).
  $whole_text = preg_replace("/([^\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)([\\x20]+)?([\\x21-\\x26\\x28-\\x2C\\x2E-\\x2F\\x3A-\\x40\\x5B-\\x5E\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)([\\x20]+)?/u", "$1 $3 ", $whole_text);

  // Inserting spaces between every word/punctuation or word/space/punctuation.
  // To use in next step preg_split. Leaving out dash (2D) and underscores (5F).
  $whole_text = preg_replace("/([^\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)([\\x20]+)([\\x2D]+)([\\x20]+)/u", "$1 $3 ", $whole_text);

  // Inserting spaces between word/dash/space. As needed for example in German.
  // Verb prefixes.
  $whole_text = preg_replace("/([^\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)([\\x2D]+)([\\x20]+)/u", "$1 $2 ", $whole_text);

  // Inserting spaces between two punctuation.
  $whole_text = preg_replace("/([\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5E\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)([\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5E\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)/u", "$1 $2 ", $whole_text);

  // Reducing multiple to single white spaces.
  $whole_text = preg_replace("/([\\x20]+)/u", " ", $whole_text);

  // Splitting string into array. Items will be wrapped in span elements next.
  $field_words[] = preg_split("/(\s)/", $whole_text);

  // Wrap each word/punctuation in span elements.
  $wid = 1;
  foreach ($field_words[0] as $word_id => $word) {
    if ($word != "") {
      // Is a word that contains only letters and is not a paragraph.
      if (preg_match("/[^\\x20-\\x26\\x28-\\x2F\\x3A-\\x3F\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+/u", $word)
       && !preg_match("/([\\x20-\\x26\\x28-\\x2F\\x3A-\\x3F\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)/u", $word)
       && !preg_match("/paragraphparagraph/", $word)) {
        $new_word[] = "<span class='ec-p" . $wid . " token' id='ec-p" . $wid . "'>" . trim($word) . "</span><div id='ec-bgr" . $wid . "' style='display:none;'></div>";
        $wid++;
      }
      // Wrap differently if it is punctuation.
      if (ctype_punct($word)) {
        $new_word[] = "<span class='ec-p" . $wid . " token punctuation' id='ec-p" . $wid . "'>" . trim($word) . "</span><div id='ec-bgr" . $wid . "' style='display:none;'></div>";
        $wid++;
      }
      // Wrap differently if it contains punctuation and letters.
      if (preg_match("/([^\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)([\\x20-\\x26\\x28-\\x2F\\x3A-\\x3F]+)([^\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)/u", $word)) {
        $new_word[] = "<span class='ec-p" . $wid . " token' id='ec-p" . $wid . "'>" . trim($word) . "</span><div id='ec-bgr" . $wid . "' style='display:none;'></div>";
        $wid++;
      }
      // Wrap differently if it is a paragraph marker.
      if (preg_match("/paragraphparagraph/", $word)) {
        $new_word[] = "paragraphparagraph";
      }
    }

    // Have to add unix line break character for later substitution.
    if ($word == ""|| preg_match("/paragraphparagraph/", $word)) {
      $new_word[] = "\n";
    }
  }

  // Add all array elements back together.
  $output = implode("<span class=text_space> </span>", $new_word);
  $output = preg_replace("/(\s\s+)/", "\n", $output);

  // Setting lines marker for future use.
  $lines = preg_split('/\n/', $output);

  $count = 0;
  // Wrapping line in line spans.
  foreach ($lines as $key => $line) {
    if (!preg_match("/paragraphparagraph/", $line)) {
      $line_array[$count] = "<div class='ecomma_line'>" . $line . "</div>";
    }
    if (preg_match("/paragraphparagraph/", $line)) {
      $line_array[$count] = "<div class='ecomma_line'>" . preg_replace("/paragraphparagraph/", '', $line) . "</div>";
      $count++;
      $line_array[$count] = "paragraphparagraph";
    }
    $count++;
  }

  variable_set("ecomma_lines", $line_array);

  // Substituting div element with line class for \n unix line break.
  $display_text = "<div class='ecomma_line'>" . preg_replace('/\n/', "</div><br /><div class='ecomma_line'>", $output);
  $display_text = preg_replace("/<div class\=\'ecomma_line\'>(?!.*<div class\=\'ecomma_line\'>)/", "", $display_text);

  // Splitting into paragraphs for final output.
  $fields_array[] = preg_split("/paragraphparagraph/", $display_text);

  $fields_final = '';

  // Final output.
  foreach ($fields_array as $fields_array_key => $fields_array_item) {
    foreach ($fields_array_item as $fields_array_item_key => $fields_array_item_item) {
      $fields_final .= $fields_array_item_item . "\n<br /><br />";
    }
  }

  return $fields_final;

}

/**
 * Implements hook_panels_pane_content_alter().
 */
function ecomma_panels_pane_content_alter($content, $pane, $args, $context) {
  $content_type_name = $context['argument_nid_1']->data->type;
  $content_type_data = content_types($content_type_name);

  foreach ($content_type_data['fields'] as $field_name => $field_data) {
    if ($field_data['widget']['type'] == 'text_textarea' && preg_match("/field_/", $content->delta)) {
      if (db_result(db_query("SELECT ecomma_enabled FROM {ecomma_field_enabled} WHERE field_name='%s' AND content_type_name='%s'", $field_name, $content_type_name))) {
        $node = node_load($context['argument_nid_1']->data->nid);
        $content->content = theme('ecomma_formatter_myformatter', $node, $node->$field_name);
      }
    }
  }

}

/**
 * Implements hook_element_info_alter().
 */
function ecomma_element_info_alter(&$type) {
  if (isset($type['text_format']['#process'])) {
    foreach ($type['text_format']['#process'] as &$callback) {
      if ($callback === 'filter_process_format') {
        $callback = 'ecomma_filter_process_format';
      }
    }
  }

}

/**
 * Implements hook_filter_process_format().
 */
function ecomma_filter_process_format($element) {
  $element = filter_process_format($element);
  // Change input format to "Filtered HTML" for comment fields.
  if ($element['#field_name'] == 'comment_body') {
    $element['format']['format']['#default_value'] = '0';
  }
  return $element;
}

/**
 * Implements hook_nodeapi().
 */
function ecomma_nodeapi(&$node, $op, $teaser, $page) {

  $content_type_name = $node->type;
  $content_type_data = content_types($content_type_name);
  $ecomma_enabled = 0;

  foreach ($content_type_data['fields'] as $field_name => $field_data) {
    if ($field_data['widget']['type'] == 'text_textarea' && $ecomma_enabled == 0) {
      if (db_result(db_query("SELECT ecomma_enabled FROM {ecomma_field_enabled} WHERE field_name='%s' AND content_type_name='%s'", $field_name, $content_type_name))) {
        $ecomma_enabled = db_result(db_query("SELECT ecomma_enabled FROM {ecomma_field_enabled} WHERE field_name='%s' AND content_type_name='%s'", $field_name, $content_type_name));
        $ecomma_field_name = $field_name;
      }
    }
  }

  if ($ecomma_enabled) {

    switch ($op) {

      case 'load':
        $_ecomma_field_value = theme('ecomma_formatter_myformatter', $node, $node->$field_name);
        break;

      case 'view':
        $node->content[$field_name] = array(
          '#value' => '',
          '#weight' => 10,
        );
        $node->content[$field_name]['#value'] = theme('ecomma_formatter_myformatter', $node, $node->$field_name);
        break;

      case 'delete':
        $result_db = db_query("DELETE FROM {ecomma} WHERE nid ='%d'", $type_nid);
        $result_db = db_query("DELETE FROM {ecomma_range} WHERE nid ='%d'", $type_nid);
        break;

      case 'presave':
        $old = node_load($node->nid)->$field_name;

        // Merging cck field values to whole text.
        $whole_text_old = '';
        $whole_text_new = '';

        if ($old) {
          foreach ($old as $field_value) {
            $whole_text_old .= $field_value['value'];
          }

          foreach ($node->$field_name as $field_value) {
            $whole_text_new .= $field_value['value'];
          }

          // Inserting spaces between every word/punctuation/space/punctuation.
          $whole_text_old = preg_replace("/([^\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)([\\x20]+)?([\\x21-\\x26\\x28-\\x2C\\x2E-\\x2F\\x3A-\\x40\\x5B-\\x5E\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)([\\x20]+)?/u", "$1 $3 ", $whole_text_old);
          $whole_text_new = preg_replace("/([^\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)([\\x20]+)?([\\x21-\\x26\\x28-\\x2C\\x2E-\\x2F\\x3A-\\x40\\x5B-\\x5E\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)([\\x20]+)?/u", "$1 $3 ", $whole_text_new);

          // Inserting spaces between every word/punctuation/space/punctuation.
          $whole_text_old = preg_replace("/([^\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)([\\x20]+)([\\x2D]+)([\\x20]+)/u", "$1 $3 ", $whole_text_old);
          $whole_text_new = preg_replace("/([^\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)([\\x20]+)([\\x2D]+)([\\x20]+)/u", "$1 $3 ", $whole_text_new);

          // Inserting spaces between word/dash/space.
          $whole_text_old = preg_replace("/([^\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)([\\x2D]+)([\\x20]+)/u", "$1 $2 ", $whole_text_old);
          $whole_text_new = preg_replace("/([^\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)([\\x2D]+)([\\x20]+)/u", "$1 $2 ", $whole_text_new);

          // Inserting spaces between two punctuation.
          $whole_text_old = preg_replace("/([\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5E\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)([\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5E\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)/u", "$1 $2 ", $whole_text_old);
          $whole_text_new = preg_replace("/([\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5E\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)([\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5E\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)/u", "$1 $2 ", $whole_text_new);

          // Reducing multiple to single white spaces.
          $whole_text_old = preg_replace("/([\\x20]+)/u", " ", $whole_text_old);
          $whole_text_new = preg_replace("/([\\x20]+)/u", " ", $whole_text_new);

          // Splitting string into array. Items will be wrapped in span next.
          $field_words_old[] = preg_split("/(\s)/", $whole_text_old);
          $field_words_new[] = preg_split("/(\s)/", $whole_text_new);

          $array_diff_assoc = array_diff_assoc($field_words_new[0], $field_words_old[0]);

          $rcount = 0;
          $ranges = db_query("SELECT rid, nid, tid, cid, beg, end, created FROM {ecomma_range}");
          while ($r = db_fetch_array($ranges)) {
            $range_table[$rcount]['rid'] = $r['rid'];
            $range_table[$rcount]['nid'] = $r['nid'];
            $range_table[$rcount]['tid'] = $r['tid'];
            $range_table[$rcount]['cid'] = $r['cid'];
            $range_table[$rcount]['beg'] = $r['beg'];
            $range_table[$rcount]['end'] = $r['end'];
            $range_table[$rcount]['created'] = $r['created'];
            $rcount++;
          }

          foreach ($range_table as $range_key => $range) {
            $rid = $range_table[$range_key]['rid'];
            $nid = $range_table[$range_key]['nid'];
            $tid = $range_table[$range_key]['tid'];
            $cid = $range_table[$range_key]['cid'];
            $beg = $range_table[$range_key]['beg'];
            $end = $range_table[$range_key]['end'];
            $created = $range_table[$range_key]['created'];

            // Section below is maybe be needed to render annotated text.
            if ($field_words_old[0][$beg] != $field_words_new[0][$beg]) {
              while ($field_words_old[0][$beg] == "" && $beg != $end) {
                $beg++;
              }

              $find_beg = $beg - 1;

              while ($field_words_old[0][$beg] . " " . $field_words_old[0][$beg + 1] . " " . $field_words_old[0][$beg + 2] != $field_words_old[0][$find_beg] . " " . $field_words_old[0][$find_beg + 1] . " " . $field_words_old[0][$find_beg + 2] && $find_beg != 0) {
                $find_beg--;
              }

              if ($find_beg == 0) {
                $find_beg = $beg + 1;
                while ($field_words_old[0][$beg] != $field_words_new[0][$find_beg]
                  && $field_words_new[0][$find_beg] != $field_words_old[0][$end]) {
                  $find_beg++;
                }
              }

              if ($find_beg != 0) {
              }

            }

            if ($field_words_old[0][$end] != $field_words_new[0][$end] && $find_beg && $find_beg != ""  && $find_beg > 0) {
              $find_end = $end - 1;

              while ($field_words_old[0][$end] . " " . $field_words_old[0][$end + 1] . " " . $field_words_old[0][$end + 2] != $field_words_old[0][$find_end] . " " . $field_words_old[0][$find_end + 1] . " " . $field_words_old[0][$find_end + 2] && $find_end != $find_beg) {
                $find_end--;
              }

              if ($find_end == $find_beg) {
                $find_end = $end + 1;
                while ($field_words_old[0][$end] != $field_words_new[0][$find_end]
                 && $find_end != count($field_words_new[0]) - 1) {
                  $find_end++;
                }
              }

              if ($find_end != $find_beg && $find_end != count($field_words_new[0]) - 1) {
              }

            }

          }
        }
        break;

    }

  }

}

/**
 * Implements hook_form_alter().
 */
function ecomma_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'comment_form':
      // Call submit function to update ecomma_range with node comment info.
      $form['subject'] = NULL;
      $form['preview'] = NULL;
      $form['_author'] = NULL;
      $form['submit']['#value'] = "Add";
      $form['comment_filter']['comment']['#rows'] = 3;
      $form['comment_filter']['format'] = NULL;
      $form['#submit'][] = 'ecomma_comment_submit';
      break;

    case 'comment_confirm_delete':
      // Call submit function to update ecomma_range with node comment info.
      // If comment_delete module isn't enabled.
      $form['#submit'][] = 'ecomma_comment_delete';
      break;

    case 'comment_delete_form':
      // Call submit function to update ecomma_range with node comment info.
      // If comment_delete module is enabled.
      $form['#submit'][] = 'ecomma_altern_comment_delete_module';
      break;

    case 'content_field_edit_form':
      // Ecomma enable checkbox will appear on settings for textarea CCK field.
      if ($form['#field']['type'] == "text" && $form['widget']['description']['#type'] == "textarea") {

        $field_name = $form['#field']['field_name'];
        $type_name = $form['#field']['type_name'];

        // Query db table, returns ecomma status (enabled/disabled).
        $q = db_query("SELECT t.ecomma_enabled FROM {ecomma_field_enabled} t WHERE field_name='%s' AND content_type_name='%s'", $field_name, $type_name);
        while ($r = db_fetch_array($q)) {
          $key = $r['form_id'];
          $ecomma_enabled_current = $r['ecomma_enabled'];
        }

        if (user_access(ecomma_perm_admin)) {
          // Add checkbox for ecomma features the settings for.
          $form['widget']['ecomma'] = array(
            '#type' => 'checkbox',
            '#title' => t('Enable ecomma commentary features'),
            '#default_value' => $ecomma_enabled_current,
            '#weight' => 0,
          );
          // Update status of ecomma features for this text field.
          $form['#submit'][] = 'ecomma_settings_field_submit';
        }
      }
      break;

    case 'community_tags_form':
      global $user;
      $form['tags']['#title'] = 'Delete your tags';
      if ($user->uid == 0) {
        $form['new']['#type'] = 'markup';
        $form['new']['#value'] = '<div class="login-prompt"><a href="/drupal/user/login?destination = node%2F' . arg(1) . '">Login</a> or <a href="/drupal/user/register?destination = node%2F' . arg(1) . '">register</a> to add tags</div>';
        unset($form['tags']);
        unset($form['submit']);
      }
      break;

  }
}

/**
 * Implements hook_comment_submit().
 *
 * When comment is submitted to insert a new database record in ecomma_range
 * database table.
 */
function ecomma_comment_submit($form, &$form_state) {
  global $user;
  $uid = $user->uid;
  $cid = db_result(db_query("SELECT MAX(cid) FROM {comments}"));
  $tid = 0;
  $nid = $form_state['node']->nid;
  $beg = $_POST['comment-range-beg'];
  $end = $_POST['comment-range-end'];
  $timestamp = strtotime('now');

  if (isset($cid) && isset($beg) && isset($end) && arg(0) != "comment") {
    $result_db = db_query("INSERT INTO {ecomma_range} (rid, nid, vid, uid, tid, cid, beg, end, created) VALUES (NULL, %d, %d, %d, %d, %d, %d, %d, %d);", $nid, $nid, $uid, $tid, $cid, $beg, $end, $timestamp);
  }
}

/**
 * Implements hook_comment_delete().
 *
 * To delete the ecomma_range record that corresponds with the comment that is
 * being deleted.
 * Only used if comment_delete module isn't enabled.
 */
function ecomma_comment_delete($form, &$form_state) {
  global $user;
  $uid = $user->uid;
  $nid = $form['#comment']->nid;
  $cid = $form['#comment']->cid;
  $result_db = db_query("DELETE FROM {ecomma_range} WHERE cid ='%d' AND nid ='%d' AND uid ='%d'", $cid, $nid, $uid);
}

/**
 * Implements hook_altern_comment_delete_module().
 *
 * To delete the ecomma_range record that corresponds with the comment that is
 * being deleted. Only used if comment_delete module isn't enabled.
 */
function ecomma_altern_comment_delete_module($form, &$form_state) {
  global $user;
  $uid = $user->uid;
  $nid = preg_replace('/node\//im', '', $form_state['redirect']);
  $cid = $form['cid']['#value'];
  $result_db = db_query("DELETE FROM {ecomma_range} WHERE cid ='%d' AND nid ='%d' AND uid ='%d'", $cid, $nid, $uid);
}

/**
 * Implements hook_settings_field_submit().
 */
function ecomma_settings_field_submit($form, &$form_state) {
  $field_name = $form_state['values']['field_name'];
  $type_name = $form_state['values']['type_name'];
  $checkbox_value = $form_state['values']['ecomma'] ? 1 : 0;
  $ecomma_enabled = db_result(db_query("SELECT ecomma_enabled FROM {ecomma_field_enabled} WHERE field_name='%s'", $field_name));
  if ($ecomma_enabled != "") {
    $result_db = db_query("UPDATE {ecomma_field_enabled} SET field_name='%s', content_type_name='%s', ecomma_enabled=%d  WHERE field_name='%s'", $field_name, $type_name, $checkbox_value, $field_name);
  }
  else {
    $result_db = db_query("INSERT INTO {ecomma_field_enabled} (field_name, content_type_name, ecomma_enabled) VALUES ('%s', '%s' , %d)", $field_name, $type_name, $checkbox_value);
  }
  drupal_set_message(check_plain(t('The ecomma commentary features were @ecomma_enabled_status for @fieldname', array('@ecomma_enabled_status' => ($form_state['values']['ecomma'] ? "enabled" : 'disabled'), '@fieldname' => $field_name))));
}

/**
 * Implements hook_block().
 */
function ecomma_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[0]['info'] = t('eComma Word Cloud');
      $blocks[1]['info'] = t('eComma Tag Details');
      $blocks[2]['info'] = t('eComma Comment Cloud');
      $blocks[3]['info'] = t('eComma User Annotation Total');
      return $blocks;

    case 'view':
      if (ctype_digit(arg(1))) {
        $node = menu_get_object();

        switch ($delta) {
          case 0:
            $block['subject'] = t('eComma Word cloud');
            $block['content'] = t('<div class="word_cloud">!word_cloud_final</div>', array('!word_cloud_final' => ecomma_word_cloud($node)));
            break;

          case 1:
            $block['subject'] = t('eComma tag details');
            $block['content'] = t(ecomma_tag_details());
            break;

          case 2:
            $block['subject'] = t('Comment Cloud');
            $block['content'] = t('<div class="comment_cloud">!comment_texts_final</div>', array('!comment_texts_final' => ecomma_comment_cloud($node)));
            break;

          case 3:
            $block['subject'] = t('User list with annotation count');
            $block['content'] = t(ecomma_user_data());
            break;
        }

        return $block;
      }
  }
}


/**
 * Implements ecomma_word_cloud().
 *
 * This function formats the content of the eComma enabled text field word
 * cloud block.
 *
 * @param object $node
 *   Current node that contains the eComma enabled text field.
 *
 * @return string
 *   String of the ecomma word cloud block content.
 */
function ecomma_word_cloud($node) {
  // Get name of ecomma enabled text_fields
  $content_type_name = $node->type;
  $content_type_data = content_types($content_type_name);
  $ecomma_enabled = 0;

  if (arg(0) == "node") {
    foreach ($content_type_data['fields'] as $field_name => $field_data) {
      if ($field_data['widget']['type'] == 'text_textarea' && $ecomma_enabled == 0) {
        $ecomma_enabled = db_result(db_query("SELECT ecomma_enabled FROM {ecomma_field_enabled} WHERE field_name='%s' AND content_type_name='%s'", $field_name, $content_type_name));
        $ecomma_field_name = $field_name;
      }
    }
  }

  $whole_text = "";

  // Merging cck field values to whole text.
  foreach ($node->$ecomma_field_name as $field_key => $field_item) {
    $whole_text .= $field_item['value'];
  }

  // Insert extra space between letter and punctuation (not dashes).
  // (-, exp. est-ce) and appostrophies (', exp. Century's).
  $whole_text = preg_replace("/([^\\x21-\\x26\\x28-\\x2C\\x2E-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E]+)([\\x21-\\x26\\x28-\\x2C\\x2E-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E]+)/u", "$1 $2 ", $whole_text);
  // Splitting into a word array.
  $whole_text = strtolower($whole_text);
  $word_cloud_items = preg_split("/(\s)/", $whole_text);
  if ($word_cloud_items) {
    $words_count_array = array_count_values($word_cloud_items);
    $steps = 6;
    $tags = array();
    $min = 1e9;
    $max = -1e9;
    $output = '';

    foreach ($words_count_array as $key => $word_count) {
      $min = min($min, $word_count);
      $max = max($max, $word_count);
      $range = max(.01, $max - $min) * 1.0001;
      $word_weight = 1 + floor($steps * ($word_count - $min) / $range);
      $output .= "<h$word_weight><a href='#'>$key</a></h$word_weight>";
    }
  }

  return $output;
}


/**
 * Implements ecomma_tag_details().
 *
 * This function gathers the tag metadata for the tags of the current
 * eComma enabled node.
 *
 * @return string
 *   String of the ecomma tag details block content.
 */
function ecomma_tag_details() {
  global $base_url;
  $view_name = 'ecomma_user_data';
  $display_id = 'default';
  $view = views_get_view($view_name);
  $view->set_arguments(array(arg(1), "all"));
  $view->execute_display('default');

  if ($view->style_plugin->rendered_fields) {
    $user_data_table = '<ol class="ec-tag-list" id="ec-tag-list">';
    foreach ($view->style_plugin->rendered_fields as $key => $user_data) {
      $tid = $user_data['tid'];
      $uid = $user_data['uid'];
      $rid = $user_data['rid'];
      $beg = $user_data['beg'];
      $end = $user_data['end'];
      $term_name = db_result(db_query("SELECT name FROM { term_data} WHERE  tid='%d'", $tid));
      $user_name = db_result(db_query("SELECT name FROM {users} WHERE  uid='%d'", $uid));
      $date = date('d M Y gA', db_result(db_query("SELECT created FROM {ecomma_range} WHERE  rid='%d'", $rid)));

      $user_data_table .= '<li class="user-data user-data-term' . $tid . '" id="ec-tag-e### ' . $beg . ' ' . $end . '" style="display: none;" ><div class="ec-tag-item"><a href="" class="term_name">' . $term_name . '</a> by <a href="' . $base_url . '/ecomma_user_data/' . arg(1) . '/' . $uid . '">' . $user_name . '</a></div><div class="ec-tag-date">' . $date . '</div></li>';
    }
    $user_data_table .= '</ol>';
  }
  return $user_data_table;
}


/**
 * Implements ecomma_comment_cloud().
 *
 * This function formats the comment text of all comments as a word cloud.
 *
 * @return string
 *   String of the ecomma comment-word-cloud block.
 */
function ecomma_comment_cloud($node) {
  $comment_texts = "";
  $sql = "SELECT cid FROM {comments} WHERE nid=%d ORDER BY timestamp DESC";
  $resource = db_query($sql, $node->nid);
  while ($row = db_fetch_array($resource)) {
    $cids[] = $row['cid'];
  }
  if (count($cids) > 0) {
    foreach ($cids as $key => $cid) {
      $sql = "SELECT comment FROM {comments} WHERE cid=%d";
      $resource = db_query($sql, $cid);
      while ($row = db_fetch_array($resource)) {
        $comment_texts .= $row['comment'] . " ";
      }
    }

    $comment_texts = preg_replace("/([^\\x21-\\x26\\x28-\\x2C\\x2E-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E]+)([\\x21-\\x26\\x28-\\x2C\\x2E-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E]+)/u", "$1 $2 ", $comment_texts);

    // Splitting into a word array.
    $comment_texts_items = preg_replace("/<([^>]*)>/", "", $comment_texts);
    $comment_texts_items = preg_split("/(\s)/", strtolower($comment_texts_items));

    if ($comment_texts_items) {
      $words_count_array = array_count_values($comment_texts_items);
      $steps = 6;
      $tags = array();
      $min = 1e9;
      $max = -1e9;
      $output = '';

      foreach ($words_count_array as $key => $word_count) {
        $min = min($min, $word_count);
        $max = max($max, $word_count);
        $range = max(.01, $max - $min) * 1.0001;
        $word_weight = 1 + floor($steps * ($word_count - $min) / $range);
        $output .= "<h$word_weight>$key</h$word_weight><h$word_weight></h$word_weight>";
      }
    }
  }
  return $output;
}


/**
 * Implements ecomma_user_data().
 *
 * This function gathers the user information of the tags and comments
 * for the current eComma enabled node.
 *
 * @return string
 *   String of the ecomma user data block content.
 */
function ecomma_user_data() {
  global $base_url;
  $view_name = 'ecomma_user_data';
  $display_id = 'default';
  $view = views_get_view($view_name);
  $view->set_arguments(array(arg(1), "all"));
  $view->execute_display('default');
  if ($view->style_plugin->rendered_fields) {
    foreach ($view->style_plugin->rendered_fields as $key => $user_data) {
      $uids[] = $user_data['uid'];
    }

    $uids_totals = array_count_values($uids);

    $user_data_table = '<ol class="ec-user-list">';
    foreach ($uids_totals as $uid_key => $uid_total) {
      $user = user_load($uid_key);
      $user_data_table .= '<li class="ec-user-admin"><a href="' . $base_url . '/ecomma_user_data/' . arg(1) . '/' . $uid_key . '">' . $user->name . '</a><span>' . $uid_total . ' annotations</span></li>';
    }
    $user_data_table .= '</ol>';

  }
  return $user_data_table;
}


/**
 * Implements hook_views_query_alter().
 */
function ecomma_views_query_alter(&$view, &$query) {
  if ($view->name == 'ecomma_user_data') {
    if (arg(3) == 'nd') {
      $query->orderby[0] = 'nid ASC';
    }
    if (arg(3) == 'dt') {
      $query->orderby[0] = 'created ASC';
    }
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function ecomma_ctools_plugin_api($module, $api) {
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array(
      'version' => 1,
      'path' => drupal_get_path('module', 'ecomma') . '/includes',
    );
  }
}

/**
 * Implements hook_views_api().
 */
function ecomma_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'ecomma') . '/includes',
  );
}
