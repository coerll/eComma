<?php
/**
 * @file
 * eComma text annotation module main file.
 * Provides annotation for CCK textarea widget.
 */

/**
 * Implements hook_ctools_plugin_directory().
 */
function ecomma_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' || $module == 'panels') {
    return "includes/plugin/$plugin";
  }
}

/**
 * Implements hook_permission().
 */
function ecomma_permission() {
  return array(
    'ecomma perm admin' => array(
      'title' => t('eComma permission'),
      'description' => t('Administer permissions for eComma permission'),
    ),
  );
}

/**
 * Implements hook_help().
 */
function ecomma_help($path, $arg) {
  switch ($path) {
    case 'admin/help#ecomma':
      if (file_exists($file = drupal_get_path('module', 'ecomma') . '/README.txt')) {
        return '<pre>' . implode("\n", array_slice(explode("\n", @file_get_contents($file)), 2)) . '</pre>';
      }
      break;
  }
}

/**
 * Implements hook_menu().
 */
function ecomma_menu() {
  $items = array();
  $items['tag_range/%/%/%/%'] = array(
    'title' => 'Annotation range',
    'description' => 'Insert term annotation data.',
    'page callback' => 'ecomma_tag_range_function',
    'page arguments' => array(1, 2, 3, 4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/ecomma.ajax.inc',
  );

  $items['tag_range_delete/%/%'] = array(
    'title' => 'Annotation range',
    'description' => 'Insert term annotation data.',
    'page callback' => 'ecomma_tag_range_delete_function',
    'page arguments' => array(1, 2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/ecomma.ajax.inc',
  );

  $items['tag_query/%/%'] = array(
    'title' => 'Tag query',
    'description' => 'Term table query to return data to interface.',
    'page callback' => 'ecomma_tag_query_function',
    'page arguments' => array(1, 2),
    'access arguments' => array('administer site configuration'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/ecomma.ajax.inc',
  );

  $items['comment_query/%/%'] = array(
    'title' => 'Comment query',
    'description' => 'Comment table query to return data to interface.',
    'page callback' => 'ecomma_comment_query_function',
    'page arguments' => array(1, 2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/ecomma.ajax.inc',
  );

  $items['comments_active_text/%/%'] = array(
    'title' => 'Comment query',
    'description' => 'Comment table query to return data to interface.',
    'page callback' => 'ecomma_comments_active_text_function',
    'page arguments' => array(1, 2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/ecomma.ajax.inc',
  );

  $items['enabled_callback/%'] = array(
    'title' => 'Textfield ecomma enabled status',
    'description' => 'Check if ecomma textfield was enabled.',
    'page callback' => 'ecomma_enabled_query_function',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/ecomma.ajax.inc',
  );

  return $items;
}


/**
 * Implements hook_theme().
 */
function ecomma_theme($existing, $type, $theme, $path) {

  $hooks['views_view__ecomma_user_data__page_1'] = array(
    'template'  => 'templates/views-view--ecomma_user_data--page-1',
    'original hook' => 'views_view',
    'preprocess functions' => array(
      'template_preprocess',
      'template_preprocess_views_view',
    ),
    'arguments' => array('view' => NULL),
  );

  $hooks['ecomma_formatter_myformatter'] = array(
    'variables' => array('node' => NULL, 'field' => NULL),
  );

  return $hooks;
}


/**
 * Implements hook_preprocess_comment().
 */
function ecomma__preprocess_comment(&$variables) {
  $variables['comment']->subject = NULL;
}

/**
 * Implements hook_preprocess_node().
 */
function ecomma_preprocess_node(&$vars) {
  $vars['template_files'][] = 'node-ecomma';
}


/**
 * Implements hook_ecomma_formatter_myformatter().
 */
function theme_ecomma_formatter_myformatter($node_vars) {
  $field = $node_vars['node_field'][LANGUAGE_NONE];
  $whole_text = "";

  // Merging cck field values to whole text.
  // Inserting [paragraph] for later substitution.
  foreach ($field as $field_item) {
    $whole_text .= $field_item['value'] . " paragraphparagraph ";
  }

  // Inserting spaces between every word/punctuation or word/space/punctuation.
  // To use in next step preg_split. Leaving out dash (2D) and underscores (5F).
  $whole_text = preg_replace("/([^\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)([\\x20]+)?([\\x21-\\x26\\x28-\\x2C\\x2E\\x2F\\x3A-\\x40\\x5B-\\x5E\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)([\\x20]+)?/u", "$1 $3 ", $whole_text);

  // Inserting spaces between every word/punctuation or word/space/punctuation.
  // To use in next step preg_split. Leaving out dash (2D) and underscores (5F).
  $whole_text = preg_replace("/([^\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)([\\x20]+)([\\x2D]+)([\\x20]+)/u", "$1 $3 ", $whole_text);

  // Inserting spaces between every word/punctuation or parenthesis/comma.
  $whole_text = preg_replace("/([^\\x29]+)([\\x20]+)?([\\x2C]+)/u", "$1 $3 ", $whole_text);

  // Inserting spaces between word/dash/space. As needed for example in German.
  // Verb prefixes.
  $whole_text = preg_replace("/([^\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)([\\x2D]+)([\\x20]+)/u", "$1 $2 ", $whole_text);

  // Inserting spaces between two punctuation.
  $whole_text = preg_replace("/([\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5E\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)([\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5E\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)/u", "$1 $2 ", $whole_text);

  // Inserting spaces between two punctuation with whitespace.
  $whole_text = preg_replace("/([\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5E\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)([\\x20]+)([\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5E\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)/u", "$1 $2 ", $whole_text);

  // Reducing multiple to single white spaces.
  $whole_text = preg_replace("/([\\x20]+)/u", " ", $whole_text);

  // Splitting string into array. Items will be wrapped in span elements next.
  $field_words[] = preg_split("/(\s)/", $whole_text);

  // Wrap each word/punctuation in span elements.
  $wid = 1;
  foreach ($field_words[0] as $word) {
    if ($word != "") {
      // Is a word that contains only letters and is not a paragraph.
      if (preg_match("/[^\\x20-\\x26\\x28-\\x2F\\x3A-\\x3F\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+/u", $word)
       && !preg_match("/([\\x20-\\x26\\x28-\\x2F\\x3A-\\x3F\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)/u", $word)
       && !preg_match("/paragraphparagraph/", $word)) {
        $new_word[] = "<span class='ec-p" . $wid . " token' id='ec-p" . $wid . "'>" . trim($word) . "</span><div id='ec-bgr" . $wid . "' style='display:none;'></div>";
        $wid++;
      }
      // Wrap differently if it is punctuation.
      if (ctype_punct($word)) {
        $new_word[] = "<span class='ec-p" . $wid . " token punctuation' id='ec-p" . $wid . "'>" . trim($word) . "</span><div id='ec-bgr" . $wid . "' style='display:none;'></div>";
        $wid++;
      }
      // Wrap differently if it contains punctuation and letters.
      if (preg_match("/([^\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)([\\x20-\\x26\\x28-\\x2F\\x3A-\\x3F]+)([^\\x21-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E\\x82\\x84-\\x85\\x87-\\x89\\x8B\\x91-\\x98\\x9B\\xA2-\\xA5\\xAB-\\xAC\\xAF\\xB0-\\xBE]+)/u", $word)) {
        $new_word[] = "<span class='ec-p" . $wid . " token' id='ec-p" . $wid . "'>" . trim($word) . "</span><div id='ec-bgr" . $wid . "' style='display:none;'></div>";
        $wid++;
      }
      // Wrap differently if it is a paragraph marker.
      if (preg_match("/paragraphparagraph/", $word)) {
        $new_word[] = "paragraphparagraph";
      }
    }

    // Have to add unix line break character for later substitution.
    if ($word == ""|| preg_match("/paragraphparagraph/", $word)) {
      $new_word[] = "\n";
    }
  }

  // Add all array elements back together.
  $output = implode("<span class=text_space> </span>", $new_word);
  $output = preg_replace("/(\s\s+)/", "\n", $output);

  // Setting lines marker for future use.
  $lines = preg_split('/\n/', $output);

  $count = 0;
  // Wrapping line in line spans.
  foreach ($lines as $line) {
    if (!preg_match("/paragraphparagraph/", $line)) {
      $line_array[$count] = "<div class='ecomma_line'>" . $line . "</div>";
    }
    if (preg_match("/paragraphparagraph/", $line)) {
      $line_array[$count] = "<div class='ecomma_line'>" . preg_replace("/paragraphparagraph/", '', $line) . "</div>";
      $count++;
      $line_array[$count] = "paragraphparagraph";
    }
    $count++;
  }

  variable_set("ecomma_lines", $line_array);

  // Substituting div element with line class for \n unix line break.
  $display_text = "<div class='ecomma_line'>" . preg_replace('/\n/', "</div><br /><div class='ecomma_line'>", $output);
  $display_text = preg_replace("/<div class\=\'ecomma_line\'>(?!.*<div class\=\'ecomma_line\'>)/", "", $display_text);

  // Splitting into paragraphs for final output.
  $fields_array[] = preg_split("/paragraphparagraph/", $display_text);

  $fields_final = '';

  // Final output.
  foreach ($fields_array as $fields_array_item) {
    foreach ($fields_array_item as $fields_array_item_item) {
      $fields_final .= $fields_array_item_item . "\n<br /><br />";
    }
  }
  return $fields_final;

}

/**
 * Implements hook_panels_pane_content_alter().
 */
function ecomma_panels_pane_content_alter($content, $pane, $args, $context) {
  $content_type_name = $context['argument_entity_id:node_1']->data->type;
  $content_type_data = field_info_instances("node", $content_type_name);

  foreach ($content_type_data as $field_name => $field_data) {
    if ($field_data['widget']['type'] == 'text_textarea' && db_query("SELECT * FROM {ecomma_field_enabled}")->rowCount()) {
      if (db_query("SELECT ecomma_enabled FROM {ecomma_field_enabled} WHERE field_name=:fname AND content_type_name=:cname", array(':fname' => $field_name, ':cname' => $content_type_name))->fetchField()) {
        $node = node_load($context['argument_entity_id:node_1']->data->nid);

        $field_name = $field_data['field_name'];
        if ($content->module == 'entity_field') {
          $content->content = theme('ecomma_formatter_myformatter', array('node' => $node, 'node_field' => $node->$field_name));
        }
      }
    }
  }

}


/**
 * Implements hook_node_delete().
 */
function ecomma_node_delete($node) {
  $content_type_name = $node->type;
  $content_type_data = field_info_instances("node", $content_type_name);
  $ecomma_enabled = 0;

  foreach ($content_type_data as $field_name => $field_data) {
    if ($field_data['widget']['type'] == 'text_textarea' && $ecomma_enabled == 0 && db_query("SELECT * FROM {ecomma_field_enabled}")->rowCount() > 0) {
      if (db_query("SELECT ecomma_enabled FROM {ecomma_field_enabled} WHERE field_name=:fname AND content_type_name=:cname", array(':fname' => $field_name, ':cname' => $content_type_name))->fetchField()) {
        $ecomma_enabled = db_query("SELECT ecomma_enabled FROM {ecomma_field_enabled} WHERE field_name=:fname AND content_type_name=:cname", array(':fname' => $field_name, ':cname' => $content_type_name))->fetchField();
      }
    }
  }

  if ($ecomma_enabled) {
    db_delete('ecomma_range')
      ->condition('nid', $node->nid)
      ->execute();
  }
}


/**
 * Implements hook_node_prepare().
 */
function ecomma_node_prepare($node) {

  $content_type_name = $node->type;
  $content_type_data = field_info_instances("node", $content_type_name);
  $ecomma_enabled = 0;

  foreach ($content_type_data as $field_name => $field_data) {
    if ($field_data['widget']['type'] == 'text_textarea' && $ecomma_enabled == 0 && db_query("SELECT * FROM {ecomma_field_enabled}")->rowCount() > 0) {
      if (db_query("SELECT ecomma_enabled FROM {ecomma_field_enabled} WHERE field_name=:fname AND content_type_name=:cname", array(':fname' => $field_name, ':cname' => $content_type_name))->fetchField()) {
        $ecomma_enabled = db_query("SELECT ecomma_enabled FROM {ecomma_field_enabled} WHERE field_name=:fname AND content_type_name=:cname", array(':fname' => $field_name, ':cname' => $content_type_name))->fetchField();
      }
    }
  }

  if ($ecomma_enabled) {
    global $user;
    if (!db_query("SELECT created FROM {ecomma_range} WHERE nid =:nid AND uid =:uid", array(':nid' => $node->nid, ':uid' => $user->uid))->fetchField()) {
      $message = "An eComma text cannot be edited once it was annotated or the annotations will not display correctly.<br />Please delete all annotations before you edit the text.";
      drupal_set_message(check_plain($message), 'warning', TRUE);
    }
  }
}


/**
 * Implements hook_form_alter().
 */
function ecomma_form_alter(&$form, &$form_state, $form_id) {
  global $base_url;
  global $user;

  $user_role = "user";
  if ($user->uid == 0) {
    $user_role = "anonymous";
  }

  $form['#attached']['js'][] = array(
    'data' => drupal_get_path('module', 'ecomma') . '/js/ecomma.js',
    'type' => 'file',
  );

  $form['#attached']['js'][] = array(
    'data' => array(
      'ecomma' => array(
        'base_url_var' => $base_url,
        'user_role' => $user_role,
        'ecommaToken' => drupal_get_token(),
      )),
    'type' => 'setting',
  );

  $form['#attached']['css'] = array(
    drupal_get_path('module', 'ecomma') . '/css/ecomma.css' => array(
      'type' => 'file',
    ),
  );
  $form['#attached']['library'][] = array('system', 'ui.dialog');
  $form['#attached']['library'][] = array('system', 'ui.tabs');
  $form['#attached']['library'][] = array('system', 'ui.draggable');
  $form['#attached']['library'][] = array('system', 'ui.droppable');
  $form['#attached']['library'][] = array('system', 'ui.sortable');

  switch ($form_id) {
    case 'comment_node_ecomma_form':
      // Call submit function to update ecomma_range with node comment info.
      $form['subject'] = NULL;
      $form['author']['_author']['#access'] = FALSE;
      $form['actions']['preview'] = NULL;
      $form['actions']['submit']['#value'] = "Add";
      $form['comment_body'][LANGUAGE_NONE][0]['#rows'] = 3;
      $form['comment_body']['#after_build'][] = 'ecomma_customize_comment_form';
      $form['#submit'][] = 'ecomma_comment_submit';
      break;

    case 'comment-form':
      $form['#after_build'][] = 'ecomma_node_form_after_build';
      break;

    case 'comment_confirm_delete':
      // Call submit function to update ecomma_range with node comment info.
      // If comment_delete module isn't enabled.
      $pid = $form['cid']['#value'];
      $cid = db_select('comment', 'c')
      ->fields('c', array('cid'))
      ->condition('c.pid', $pid)
      ->execute();

      if ($cid != "") {
        while ($child = $cid->fetchAssoc()) {
          $form_state['#values']['children'][] = $child->cid;
        }
      }

      $form['#submit'][] = 'ecomma_comment_delete';
      break;

    case 'field_ui_field_edit_form':
      // Ecomma enable checkbox will appear on settings for textarea CCK field.
      if ($form['#instance']['widget']['type'] == "text_textarea") {
        $field_name = $form['#instance']['field_name'];
        $type_name = $form['#field']['bundles']['node'][0];

        // Query db table, returns ecomma status (enabled/disabled).
        if (db_query("SELECT * FROM {ecomma_field_enabled}")->rowCount() > 0) {
          $ecomma_enabled_current = db_query("SELECT ecomma_enabled FROM {ecomma_field_enabled} WHERE field_name=:field_name AND content_type_name=:type_name", array(':field_name' => $field_name, ':type_name' => $type_name))->fetchField();
        }
        else {
          $ecomma_enabled_current = 0;
        }

        if (user_access('enable ecomma textfield')) {
          // Add checkbox for ecomma features the settings for.
          $form['widget']['ecomma'] = array(
            '#type' => 'checkbox',
            '#title' => t('Enable ecomma commentary features'),
            '#default_value' => $ecomma_enabled_current,
            '#weight' => 0,
          );
          // Update status of ecomma features for this text field.
        }
      }
      $form['#submit'][] = 'ecomma_settings_field_submit';
      break;

    case 'community_tags_form':
      $form['tags']['#title'] = 'Delete your tags';
      if ($user->uid == 0) {
        $form['new']['#type'] = 'markup';
        $redirect = 'destination=' . drupal_get_path_alias(substr(urldecode(drupal_get_destination()), 12));
        $login_link = l(t('Login'), 'user', array('query' => $redirect, 'alias' => TRUE));
        $register_link = l(t('Register'), 'user/register', array('query' => $redirect, 'alias' => TRUE));
        $user_utilities = $login_link . ' ' . t('or') . ' ' . $register_link;
        $form['new']['#value'] = '<div class="login-prompt">' . $user_utilities . ' to add tags</div>';

        unset($form['tags']);
        unset($form['submit']);
      }
      break;

  }
}

/**
 * Implements hook_customize_comment_form().
 *
 * Removig farmatting options for this website.
 * database table.
 */
function ecomma_customize_comment_form(&$form) {
  $form[LANGUAGE_NONE][0]['format']['#access'] = FALSE;
  return $form;
}


/**
 * Implements hook_comment_submit().
 *
 * When comment is submitted to insert a new database record in ecomma_range
 * database table.
 */
function ecomma_comment_submit($form, &$form_state) {

  global $user;
  $uid = $user->uid;
  $cid = db_query('SELECT MAX(c.cid) from {comment} c')->fetchField();
  $tid = 0;
  $nid = $form_state['values']['nid'];
  $vid = db_select('node', 'n')
  ->fields('n', array('vid'))
  ->condition('n.nid', $nid)
  ->execute()
  ->fetchField();

  $beg = $_POST['comment-range-beg'];
  $end = $_POST['comment-range-end'];
  $timestamp = strtotime('now');

  if (isset($cid) && arg(0) != "comment") {
    if (drupal_valid_token($form['#attached']['js'][1]['data']['ecomma']['ecommaToken'])) {
      db_insert('ecomma_range')
        ->fields(array(
          'rid' => NULL,
          'nid' => $nid,
          'vid' => $vid,
          'uid' => $uid,
          'tid' => $tid,
          'cid' => $cid,
          'beg' => $beg,
          'end' => $end,
          'created' => $timestamp,
        ))->execute();
    }
  }
  else {
    $pid = db_select('comment', 'c')
    ->fields('c', array('pid'))
    ->condition('c.cid', $cid)
    ->execute()
    ->fetchField();

    $range = db_select('ecomma_range', 'e')
    ->fields('e', array('beg', 'end'))
    ->condition('e.cid', $pid)
    ->execute()
    ->fetchAssoc();

    db_insert('ecomma_range')
      ->fields(array(
        'rid' => NULL,
        'nid' => $nid,
        'vid' => $vid,
        'uid' => $uid,
        'tid' => $tid,
        'cid' => $cid,
        'beg' => $range['beg'],
        'end' => $range['end'],
        'created' => $timestamp,
      ))->execute();
  }
}

/**
 * Implements hook_comment_delete().
 *
 * To delete the ecomma_range record that corresponds with the comment that is
 * being deleted.
 * Only used if comment_delete module isn't enabled.
 */
function ecomma_comment_delete($form, &$form_state) {
  global $user;
  $uid = $user->uid;
  $nid = $form->nid;
  $cid = $form->cid;

  if ($form_state['#values']['children'][0] && $form['#parameters'][1]['post']['replies'] == 0) {
    foreach ($form['#parameters'][1]['post']['children'] as $child) {
      db_delete('ecomma_range')
        ->condition('cid', $child)
        ->condition('nid', $nid)
        ->execute();
      db_delete('ecomma_range')
        ->condition('cid', $cid)
        ->condition('nid', $nid)
        ->condition('uid', $uid)
        ->execute();
    }
  }
  elseif ($form_state['#values']['children'][0] && $form['#parameters'][1]['post']['replies'] == 1) {
    $beg = db_query("SELECT beg FROM {ecomma_range} WHERE cid =:cid AND nid =:nid AND uid =:uid", array(
    ':cid' => $cid,
    ':nid' => $nid,
    ':uid' => $uid))
    ->fetchField();
    $end = db_query("SELECT end FROM {ecomma_range} WHERE cid =:cid AND nid =:nid AND uid =:uid", array(
    ':cid' => $cid,
    ':nid' => $nid,
    ':uid' => $uid))
    ->fetchField();
    db_delete('ecomma_range')
      ->condition('cid', $cid)
      ->condition('nid', $nid)
      ->condition('uid', $uid)
      ->execute();
    $cid_max = db_result(db_query("SELECT MAX(cid) FROM {comment}"));

    foreach ($form_state['#values']['children'] as $child) {
      foreach ($form['#parameters'][1]['post']['children'] as $child) {
        db_update('ecomma_range')
        ->fields(array(
          'cid' => $cid_max,
          'beg' => $beg,
          'end' => $end,
        ))
        ->condition('cid', $child, '=')
        ->condition('nid', $nid, '=')
        ->execute();
        $cid_max++;
      }
      $cid_max++;
    }
  }
  elseif (!$form_state['#values']['children'][0]) {
    db_delete('ecomma_range')
      ->condition('cid', $cid)
      ->condition('nid', $nid)
      ->condition('uid', $uid)
      ->execute();
  }
}


/**
 * Implements hook_settings_field_submit().
 */
function ecomma_settings_field_submit($form, &$form_state) {
  $field_name = $form_state['values']['instance']['field_name'];
  $type_name = $form_state['values']['instance']['bundle'];
  $checkbox_value = $form_state['values']['ecomma'] ? 1 : 0;
  if (db_query("SELECT * FROM {ecomma_field_enabled}")->rowCount()) {
    $ecomma_enabled = db_query("SELECT ecomma_enabled FROM {ecomma_field_enabled} WHERE field_name=:fname AND content_type_name=:cname", array(':fname' => $field_name, ':cname' => $type_name))->fetchField();
  }
  else {
    $ecomma_enabled = 0;
  }
  if ($ecomma_enabled == 1) {
    db_update('ecomma_field_enabled')
    ->fields(array(
      'content_type_name' => $type_name,
      'ecomma_enabled' => $ecomma_enabled,
    ))
    ->condition('field_name', $field_name)
    ->execute();
  }
  else {
    db_insert('ecomma_field_enabled')
    ->fields(array(
      'field_name' => $field_name,
      'content_type_name' => $type_name,
      'ecomma_enabled' => $checkbox_value,
    ))->execute();
    drupal_set_message(check_plain(t('The ecomma commentary features were @ecomma_enabled_status for @fieldname', array('@ecomma_enabled_status' => ($form_state['values']['ecomma'] ? "enabled" : 'disabled'), '@fieldname' => $field_name))));
  }
}


/**
 * Implements hook_block_info().
 */
function ecomma_block_info() {
  $blocks = array();
  $blocks['ecomma_word_cloud'] = array(
    'info' => t('eComma Word Cloud'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['ecomma_tag_details'] = array(
    'info' => t('eComma Tag Details'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['ecomma_comment_cloud'] = array(
    'info' => t('eComma Comment Cloud'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['ecomma_user_annotation_total'] = array(
    'info' => t('eComma User Annotation Total'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function ecomma_block_view($delta = '') {
  global $user;

  if (ctype_digit(arg(1))) {
    $node = menu_get_object();

    $block = array();
    switch ($delta) {
      case 'ecomma_word_cloud':
        if ($user->uid) {
          $block['subject'] = t('eComma Word Cloud');
          $block['content'] = t('<div class="word_cloud">!word_cloud_final</div>', array('!word_cloud_final' => ecomma_word_cloud($node)));
        }
        break;

      case 'ecomma_tag_details':
        $view_name = 'ecomma_user_data';
        $view = views_get_view($view_name);
        $view->set_arguments(array(arg(1), "all"));
        $view->execute_display('default');

        if ($view->result) {
          $user_data_list = '<ol class="ec-tag-list" id="ec-tag-list">';
          foreach ($view->result as $user_data) {
            $tid = $user_data->ecomma_range_tid;
            $uid = $user_data->ecomma_range_uid;
            $rid = $user_data->ecomma_range_rid;
            $beg = $user_data->ecomma_range_beg;
            $end = $user_data->ecomma_range_end;

            $term_name = db_select('taxonomy_term_data', 't')
            ->fields('t', array('name'))
            ->condition('t.tid', $tid)
            ->execute()
            ->fetchField();

            $timestamp = db_select('ecomma_range', 'e')
            ->fields('e', array('created'))
            ->condition('e.rid', $rid)
            ->execute()
            ->fetchField();

            $date = date('d M Y gA', $timestamp);

            $user_data_list .= '<li class="user-data user-data-term' . $tid . '" id="ec-tag-e### ' . $beg . ' ' . $end;
            $user_data_list .= '" style="display: none;" ><div class="ec-tag-item"><a href="" class="term_name">';
            $user_data_list .= check_plain($term_name) . '</a> by ' . user_load($uid)->name . '</div><div class="ec-tag-date">';
            $user_data_list .= $date . '</div></li>';
          }
          $user_data_list .= '</ol>';
        }
        $block['subject'] = t('eComma Tag Details');
        $block['content'] = $user_data_list;
        break;

      case 'ecomma_comment_cloud':
        $block['subject'] = t('eComma Comment Cloud');
        $block['content'] = t('<div class="comment_cloud">!comment_texts_final</div>', array('!comment_texts_final' => ecomma_comment_cloud($node)));
        break;

      case 'ecomma_user_annotation_total':
        global $base_url;
        $view_name = 'ecomma_user_data';
        $view = views_get_view($view_name);
        $view->set_arguments(array(arg(1), "all"));
        $view->execute_display('default');
        if ($view->result) {
          foreach ($view->result as $user_data) {
            $uids[] = $user_data->ecomma_range_uid;
          }

          $uids_totals = array_count_values($uids);
          $user_data_table = '<ol class="ec-user-list">';
          foreach ($uids_totals as $uid_key => $uid_total) {
            $user = user_load($uid_key);
            $user_data_table .= '<li class="ec-user-admin"><a href="' . $base_url . '/ecomma_user_data/' . arg(1) . '/';
            $user_data_table .= $uid_key . '">' . $user->name . '</a><span>' . $uid_total . ' annotations</span></li>';
          }
          $user_data_table .= '</ol>';
        }

        $block['subject'] = t('eComma User Annotation Total');
        $block['content'] = $user_data_table;
        break;

    }
    return $block;
  }
}


/**
 * Implements ecomma_word_cloud().
 *
 * This function formats the content of the eComma enabled text field word
 * cloud block.
 *
 * @param object $node
 *   Current node that contains the eComma enabled text field.
 *
 * @return string
 *   String of the ecomma word cloud block content.
 */
function ecomma_word_cloud($node) {
  // Get name of ecomma enabled text_fields
  $content_type_name = $node->type;
  $content_type_data = field_info_instances("node", $content_type_name);
  $ecomma_enabled = 0;

  if (arg(0) == "node") {
    foreach ($content_type_data as $field_name => $field_data) {
      if ($field_data['widget']['type'] == 'text_textarea' && $ecomma_enabled == 0 && db_query("SELECT * FROM {ecomma_field_enabled}")->rowCount() > 0) {
        $ecomma_enabled = db_query("SELECT ecomma_enabled FROM {ecomma_field_enabled} WHERE field_name=:fname AND content_type_name=:cname", array(':fname' => $field_name, ':cname' => $content_type_name))->fetchField();
        $ecomma_field_name = $field_name;
      }
    }
  }

  $whole_text = "";

  // Merging cck field values to whole text.
  foreach ($node->$ecomma_field_name as $field_item) {
    foreach ($field_item as $field_item_paragraph) {
      $whole_text .= $field_item_paragraph['value'];
    }
  }

  // Insert extra space between letter and punctuation (not dashes).
  // (-, exp. est-ce) and appostrophies (', exp. Century's).
  $whole_text = preg_replace("/([^\\x21-\\x26\\x28-\\x2C\\x2E-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E]+)([\\x21-\\x26\\x28-\\x2C\\x2E-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E]+)/u", "$1 $2 ", $whole_text);
  // Splitting into a word array.
  $whole_text = strtolower($whole_text);
  $word_cloud_items = preg_split("/(\s)/", $whole_text);
  if ($word_cloud_items) {
    $words_count_array = array_count_values($word_cloud_items);
    ksort($words_count_array);
    $output = '';

    foreach ($words_count_array as $key => $word_count) {
      $output .= "<h$word_count class='word_cloud_tag'><a href='#'>$key</a></h$word_count>";

    }
  }

  return $output;
}


/**
 * Implements ecomma_comment_cloud().
 *
 * This function formats the comment text of all comments as a word cloud.
 *
 * @return string
 *   String of the ecomma comment-word-cloud block.
 */
function ecomma_comment_cloud($node) {
  $comment_texts = "";
  $cids = db_select('comment', 'c')
    ->fields('c', array('cid'))
    ->condition('c.nid', $node->nid)
    ->orderBy("c.created", "DESC")
    ->execute()
    ->fetchAssoc();

  if (count($cids) > 0) {
    foreach ($cids as $key => $cid) {
      $texts = db_select('field_data_comment_body', 'f')
        ->fields('f', array('comment_body_value'))
        ->condition('f.entity_id', $cid)
        ->execute()
        ->fetchAssoc();
    }

    $comment_texts = implode(" ", $texts);
    $comment_texts = preg_replace("/([^\\x21-\\x26\\x28-\\x2C\\x2E-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E]+)([\\x21-\\x26\\x28-\\x2C\\x2E-\\x2F\\x3A-\\x40\\x5B-\\x5F\\x7B-\\x7E]+)/u", "$1 $2 ", $comment_texts);

    // Splitting into a word array.
    $comment_texts_items = preg_replace("/<([^>]*)>/", "", $comment_texts);
    $comment_texts_items = preg_split("/(\s)/", strtolower($comment_texts_items));

    if ($comment_texts_items) {
      $words_count_array = array_count_values($comment_texts_items);
      ksort($words_count_array);
      $output = '';

      foreach ($words_count_array as $key => $word_count) {
        $output .= "<h$word_count>$key</h$word_count>";
      }
    }
  }
  return $output;
}


/**
 * Implements hook_views_query_alter().
 */
function ecomma_query_alter(&$query) {
  if(arg(3) == 'nd' || arg(3) == 'dt'){
    if(isset($query->alterMetaData)){
      if ($query->alterMetaData['view']->name == 'ecomma_user_data') {
        if (arg(3) == 'nd') {
          $query->orderby[0] = 'nid ASC';
        }
        if (arg(3) == 'dt') {
          $query->orderby[0] = 'created ASC';
        }
      }
    }
  }
}


/**
 * Implements hook_ctools_plugin_api().
 */
function ecomma_ctools_plugin_api($module, $api) {
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array(
      'version' => 1,
      'path' => drupal_get_path('module', 'ecomma') . '/includes',
    );
  }
}

/**
 * Implements hook_views_api().
 */
function ecomma_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'ecomma') . '/includes',
  );
}
